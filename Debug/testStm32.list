
testStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb0  08004bb0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb8  08004bb8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200000b8  08004c78  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 0002c004  20000214  08004c78  00020214  2**0
                  ALLOC
 11 .ext1flash_section 00000000  90000000  90000000  000200b8  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bd0  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000283e  00000000  00000000  00032cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  000354f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f40  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002768f  00000000  00000000  00037480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ddc  00000000  00000000  0005eb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f72e0  00000000  00000000  000728eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00169bcb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b50  00000000  00000000  00169c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000084  00000000  00000000  0016e770  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000117  00000000  00000000  0016e7f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000b8 	.word	0x200000b8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004b10 	.word	0x08004b10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000bc 	.word	0x200000bc
 8000204:	08004b10 	.word	0x08004b10

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000514:	f3bf 8f4f 	dsb	sy
}
 8000518:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051a:	f3bf 8f6f 	isb	sy
}
 800051e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <SCB_EnableICache+0x48>)
 8000522:	2200      	movs	r2, #0
 8000524:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
}
 800052c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052e:	f3bf 8f6f 	isb	sy
}
 8000532:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <SCB_EnableICache+0x48>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <SCB_EnableICache+0x48>)
 800053a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SCB_EnableDCache+0x84>)
 8000564:	2200      	movs	r2, #0
 8000566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
}
 800056e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <SCB_EnableDCache+0x84>)
 8000572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000576:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	0b5b      	lsrs	r3, r3, #13
 800057c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000580:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800058a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	015a      	lsls	r2, r3, #5
 8000590:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000594:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059a:	4911      	ldr	r1, [pc, #68]	; (80005e0 <SCB_EnableDCache+0x84>)
 800059c:	4313      	orrs	r3, r2
 800059e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	60ba      	str	r2, [r7, #8]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1ef      	bne.n	800058c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	60fa      	str	r2, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1e5      	bne.n	8000582 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005b6:	f3bf 8f4f 	dsb	sy
}
 80005ba:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SCB_EnableDCache+0x84>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <SCB_EnableDCache+0x84>)
 80005c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ce:	f3bf 8f6f 	isb	sy
}
 80005d2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <_write>:
		HAL_UART_Transmit(&huart6, &rx_data, 1, 10);
	}
}

// printf() 사용 시 호출되는 함수로서 UART와 연결을 위한 부분
int _write(int file, char *p, int len) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart6, p, len, 10);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	230a      	movs	r3, #10
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <_write+0x24>)
 80005fa:	f002 feb7 	bl	800336c <HAL_UART_Transmit>
	return len;
 80005fe:	687b      	ldr	r3, [r7, #4]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000178 	.word	0x20000178

0800060c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	int i;

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000612:	f7ff ff7d 	bl	8000510 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000616:	f7ff ffa1 	bl	800055c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061a:	f000 fc57 	bl	8000ecc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061e:	f000 f871 	bl	8000704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000622:	f000 f9dd 	bl	80009e0 <MX_GPIO_Init>
	MX_CRC_Init();
 8000626:	f000 f903 	bl	8000830 <MX_CRC_Init>
	MX_RTC_Init();
 800062a:	f000 f923 	bl	8000874 <MX_RTC_Init>
	MX_TIM1_Init();
 800062e:	f000 f951 	bl	80008d4 <MX_TIM1_Init>
	MX_USART6_UART_Init();
 8000632:	f000 f9a5 	bl	8000980 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	// Transmit by direct register control
	for (i = 'a'; i <= 'z'; i++) {
 8000636:	2361      	movs	r3, #97	; 0x61
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e00c      	b.n	8000656 <main+0x4a>
		USART6->TDR = i;    // Transmit one character
 800063c:	4a2b      	ldr	r2, [pc, #172]	; (80006ec <main+0xe0>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6293      	str	r3, [r2, #40]	; 0x28
		while (!(USART6->ISR & USART_ISR_TXE_Msk)); // if TXE(Transmit Data Register Empty) bit is 1
 8000642:	bf00      	nop
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <main+0xe0>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <main+0x38>
	for (i = 'a'; i <= 'z'; i++) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b7a      	cmp	r3, #122	; 0x7a
 800065a:	ddef      	ble.n	800063c <main+0x30>
	}

	HAL_UART_Transmit(&huart6, newLine, 2, 100);  // next line
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2202      	movs	r2, #2
 8000660:	4923      	ldr	r1, [pc, #140]	; (80006f0 <main+0xe4>)
 8000662:	4824      	ldr	r0, [pc, #144]	; (80006f4 <main+0xe8>)
 8000664:	f002 fe82 	bl	800336c <HAL_UART_Transmit>

	// Transmit by HAL function

	HAL_UART_Transmit(&huart6, start_msg, strlen(start_msg), 100);
 8000668:	4823      	ldr	r0, [pc, #140]	; (80006f8 <main+0xec>)
 800066a:	f7ff fdcd 	bl	8000208 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	4920      	ldr	r1, [pc, #128]	; (80006f8 <main+0xec>)
 8000676:	481f      	ldr	r0, [pc, #124]	; (80006f4 <main+0xe8>)
 8000678:	f002 fe78 	bl	800336c <HAL_UART_Transmit>


	USART6->ICR = USART_ICR_TCCF_Msk;  // Clear TC bit
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <main+0xe0>)
 800067e:	2240      	movs	r2, #64	; 0x40
 8000680:	621a      	str	r2, [r3, #32]

	i_TX = -1;  // Inhibit transmission
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <main+0xf0>)
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	601a      	str	r2, [r3, #0]

	// Interrupt enable: RXNE(Received data register not empty), TC(Transmission complete)
	USART6->ISR |= USART_ISR_RXNE_Msk;
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0xe0>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <main+0xe0>)
 8000690:	f043 0320 	orr.w	r3, r3, #32
 8000694:	61d3      	str	r3, [r2, #28]
	USART6->CR1 |= (USART_CR1_TCIE_Msk | USART_CR1_RXNEIE_Msk);
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <main+0xe0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <main+0xe0>)
 800069c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80006a0:	6013      	str	r3, [r2, #0]

	// Transmit str3[0], and TC interrupt will continue to transmit str3[1], str3[2], ...

	i_TX = 0;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <main+0xf0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]

	USART6->TDR = str_tx_intr[0];
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <main+0xf4>)
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <main+0xe0>)
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_Delay(100);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f000 fc77 	bl	8000fa4 <HAL_Delay>

	i_TX = 0;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <main+0xf0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]

	USART6->CR1 |= USART_CR1_TCIE_Msk; // Set TCIE(TC interrupt enable) bit again
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <main+0xe0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <main+0xe0>)
 80006c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c6:	6013      	str	r3, [r2, #0]

	USART6->TDR = str_tx_intr[0];
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <main+0xf4>)
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <main+0xe0>)
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f000 fc67 	bl	8000fa4 <HAL_Delay>

	HAL_UART_Transmit(&huart6, newLine, 2, 100);  // next line
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2202      	movs	r2, #2
 80006da:	4905      	ldr	r1, [pc, #20]	; (80006f0 <main+0xe4>)
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <main+0xe8>)
 80006de:	f002 fe45 	bl	800336c <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(1000);
 80006e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e6:	f000 fc5d 	bl	8000fa4 <HAL_Delay>
 80006ea:	e7fa      	b.n	80006e2 <main+0xd6>
 80006ec:	40011400 	.word	0x40011400
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000178 	.word	0x20000178
 80006f8:	20000004 	.word	0x20000004
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	20000034 	.word	0x20000034

08000704 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b0b4      	sub	sp, #208	; 0xd0
 8000708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800070a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800070e:	2230      	movs	r2, #48	; 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fd06 	bl	8004124 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000718:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2284      	movs	r2, #132	; 0x84
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fcf7 	bl	8004124 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <SystemClock_Config+0x124>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a3b      	ldr	r2, [pc, #236]	; (8000828 <SystemClock_Config+0x124>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <SystemClock_Config+0x124>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <SystemClock_Config+0x128>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a36      	ldr	r2, [pc, #216]	; (800082c <SystemClock_Config+0x128>)
 8000754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <SystemClock_Config+0x128>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000766:	230a      	movs	r3, #10
 8000768:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 800078a:	2308      	movs	r3, #8
 800078c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000790:	23d8      	movs	r3, #216	; 0xd8
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f8f6 	bl	8001998 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xb2>
		Error_Handler();
 80007b2:	f000 f9cb 	bl	8000b4c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80007b6:	f001 f89f 	bl	80018f8 <HAL_PWREx_EnableOverDrive>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc0>
		Error_Handler();
 80007c0:	f000 f9c4 	bl	8000b4c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80007e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ea:	2107      	movs	r1, #7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fb77 	bl	8001ee0 <HAL_RCC_ClockConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0xf8>
		Error_Handler();
 80007f8:	f000 f9a8 	bl	8000b4c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC
 80007fc:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000800:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART6;
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000806:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000808:	2300      	movs	r3, #0
 800080a:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fd3b 	bl	800228c <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x11c>
		Error_Handler();
 800081c:	f000 f996 	bl	8000b4c <Error_Handler>
	}
}
 8000820:	bf00      	nop
 8000822:	37d0      	adds	r7, #208	; 0xd0
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_CRC_Init+0x3c>)
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <MX_CRC_Init+0x40>)
 8000838:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_CRC_Init+0x3c>)
 800083c:	2200      	movs	r2, #0
 800083e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_CRC_Init+0x3c>)
 8000842:	2200      	movs	r2, #0
 8000844:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_CRC_Init+0x3c>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_CRC_Init+0x3c>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_CRC_Init+0x3c>)
 8000854:	2201      	movs	r2, #1
 8000856:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_CRC_Init+0x3c>)
 800085a:	f000 fcd9 	bl	8001210 <HAL_CRC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_CRC_Init+0x38>
		Error_Handler();
 8000864:	f000 f972 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000e4 	.word	0x200000e4
 8000870:	40023000 	.word	0x40023000

08000874 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_RTC_Init+0x58>)
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_RTC_Init+0x5c>)
 800087c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_RTC_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_RTC_Init+0x58>)
 8000886:	227f      	movs	r2, #127	; 0x7f
 8000888:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_RTC_Init+0x58>)
 800088c:	22ff      	movs	r2, #255	; 0xff
 800088e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_RTC_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_RTC_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_RTC_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <MX_RTC_Init+0x58>)
 80008a4:	f002 f8e2 	bl	8002a6c <HAL_RTC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_RTC_Init+0x3e>
		Error_Handler();
 80008ae:	f000 f94d 	bl	8000b4c <Error_Handler>
	}
	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_RTC_Init+0x58>)
 80008b8:	f002 f9be 	bl	8002c38 <HAL_RTCEx_SetWakeUpTimer>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_RTC_Init+0x52>
			!= HAL_OK) {
		Error_Handler();
 80008c2:	f000 f943 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000108 	.word	0x20000108
 80008d0:	40002800 	.word	0x40002800

080008d4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_TIM1_Init+0xa4>)
 80008f6:	4a21      	ldr	r2, [pc, #132]	; (800097c <MX_TIM1_Init+0xa8>)
 80008f8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_TIM1_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM1_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_TIM1_Init+0xa4>)
 8000908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM1_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM1_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_TIM1_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000920:	4815      	ldr	r0, [pc, #84]	; (8000978 <MX_TIM1_Init+0xa4>)
 8000922:	f002 f9fe 	bl	8002d22 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x5c>
		Error_Handler();
 800092c:	f000 f90e 	bl	8000b4c <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000930:	2307      	movs	r3, #7
 8000932:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <MX_TIM1_Init+0xa4>)
 8000940:	f002 fa46 	bl	8002dd0 <HAL_TIM_SlaveConfigSynchro>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x7a>
		Error_Handler();
 800094a:	f000 f8ff 	bl	8000b4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <MX_TIM1_Init+0xa4>)
 8000960:	f002 fc28 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800096a:	f000 f8ef 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000128 	.word	0x20000128
 800097c:	40010000 	.word	0x40010000

08000980 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_USART6_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART6_UART_Init+0x58>)
 80009c4:	f002 fc84 	bl	80032d0 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART6_UART_Init+0x52>
		Error_Handler();
 80009ce:	f000 f8bd 	bl	8000b4c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000178 	.word	0x20000178
 80009dc:	40011400 	.word	0x40011400

080009e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <MX_GPIO_Init+0x128>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a43      	ldr	r2, [pc, #268]	; (8000b08 <MX_GPIO_Init+0x128>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a37      	ldr	r2, [pc, #220]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a2b      	ldr	r2, [pc, #172]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_GPIO_Init+0x128>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(G_LED_GPIO_Port, G_LED_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2102      	movs	r1, #2
 8000a72:	4826      	ldr	r0, [pc, #152]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a74:	f000 fef4 	bl	8001860 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	481f      	ldr	r0, [pc, #124]	; (8000b10 <MX_GPIO_Init+0x130>)
 8000a94:	f000 fd38 	bl	8001508 <HAL_GPIO_Init>

	/*Configure GPIO pin : G_LED_Pin */
	GPIO_InitStruct.Pin = G_LED_Pin;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(G_LED_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4817      	ldr	r0, [pc, #92]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000ab0:	f000 fd2a 	bl	8001508 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4810      	ldr	r0, [pc, #64]	; (8000b14 <MX_GPIO_Init+0x134>)
 8000ad2:	f000 fd19 	bl	8001508 <HAL_GPIO_Init>

	/*Configure GPIO pin : B_Button_Pin */
	GPIO_InitStruct.Pin = B_Button_Pin;
 8000ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ada:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_GPIO_Init+0x138>)
 8000ade:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B_Button_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4808      	ldr	r0, [pc, #32]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000aec:	f000 fd0c 	bl	8001508 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2028      	movs	r0, #40	; 0x28
 8000af6:	f000 fb54 	bl	80011a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afa:	2028      	movs	r0, #40	; 0x28
 8000afc:	f000 fb6d 	bl	80011da <HAL_NVIC_EnableIRQ>

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40022000 	.word	0x40022000
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40020000 	.word	0x40020000
 8000b18:	10210000 	.word	0x10210000

08000b1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B_Button_Pin) {
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b2c:	d106      	bne.n	8000b3c <HAL_GPIO_EXTI_Callback+0x20>
		HAL_GPIO_TogglePin( G_LED_GPIO_Port, G_LED_Pin);
 8000b2e:	2102      	movs	r1, #2
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b32:	f000 feae 	bl	8001892 <HAL_GPIO_TogglePin>
		printf("butt click\r\n");
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b38:	f003 fb6a 	bl	8004210 <puts>
	} else {
		//	_NOP () ;
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40022000 	.word	0x40022000
 8000b48:	08004b28 	.word	0x08004b28

08000b4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_MspInit+0x44>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x44>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x44>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x44>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_CRC_MspInit+0x38>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d10b      	bne.n	8000bca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_CRC_MspInit+0x3c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <HAL_CRC_MspInit+0x3c>)
 8000bb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <HAL_CRC_MspInit+0x3c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40023000 	.word	0x40023000
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_RTC_MspInit+0x2c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d105      	bne.n	8000bfe <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_RTC_MspInit+0x30>)
 8000bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bf6:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_RTC_MspInit+0x30>)
 8000bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bfc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40002800 	.word	0x40002800
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_TIM_Base_MspInit+0x38>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d10b      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_TIM_Base_MspInit+0x3c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <HAL_TIM_Base_MspInit+0x3c>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_TIM_Base_MspInit+0x3c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x8c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12f      	bne.n	8000cd6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f003 0320 	and.w	r3, r3, #32
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x90>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ca6:	23c0      	movs	r3, #192	; 0xc0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_UART_MspInit+0x94>)
 8000cc2:	f000 fc21 	bl	8001508 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2047      	movs	r0, #71	; 0x47
 8000ccc:	f000 fa69 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000cd0:	2047      	movs	r0, #71	; 0x47
 8000cd2:	f000 fa82 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40011400 	.word	0x40011400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f914 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d48:	f000 fdbe 	bl	80018c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

 	if (i_TX >= 0 && i_TX < strlen(str_tx_intr) )  // During transmission of str3
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <USART6_IRQHandler+0x80>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db19      	blt.n	8000d90 <USART6_IRQHandler+0x40>
 8000d5c:	481d      	ldr	r0, [pc, #116]	; (8000dd4 <USART6_IRQHandler+0x84>)
 8000d5e:	f7ff fa53 	bl	8000208 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <USART6_IRQHandler+0x80>)
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d911      	bls.n	8000d90 <USART6_IRQHandler+0x40>
	{
		if (USART6->ISR & USART_ISR_TC_Msk)  // TC interrupt
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <USART6_IRQHandler+0x88>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d026      	beq.n	8000dc6 <USART6_IRQHandler+0x76>
		{
			i_TX++;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <USART6_IRQHandler+0x80>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <USART6_IRQHandler+0x80>)
 8000d80:	6013      	str	r3, [r2, #0]
			USART6->TDR = str_tx_intr[i_TX];
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <USART6_IRQHandler+0x80>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <USART6_IRQHandler+0x84>)
 8000d88:	5cd2      	ldrb	r2, [r2, r3]
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <USART6_IRQHandler+0x88>)
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
		if (USART6->ISR & USART_ISR_TC_Msk)  // TC interrupt
 8000d8e:	e01a      	b.n	8000dc6 <USART6_IRQHandler+0x76>
		}
	}
	else  // if not transmitting str3
	{
		i_TX = -1;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <USART6_IRQHandler+0x80>)
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295
 8000d96:	601a      	str	r2, [r3, #0]
		if (USART6->ISR & USART_ISR_RXNE_Msk)  // RXNE interrupt
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <USART6_IRQHandler+0x88>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	f003 0320 	and.w	r3, r3, #32
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d010      	beq.n	8000dc6 <USART6_IRQHandler+0x76>
		{
			RX_buf[0] = USART6->RDR;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <USART6_IRQHandler+0x88>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <USART6_IRQHandler+0x8c>)
 8000dac:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6, RX_buf, 1, 100);
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2201      	movs	r2, #1
 8000db2:	490a      	ldr	r1, [pc, #40]	; (8000ddc <USART6_IRQHandler+0x8c>)
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <USART6_IRQHandler+0x90>)
 8000db6:	f002 fad9 	bl	800336c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6, newLine, 2, 100);
 8000dba:	2364      	movs	r3, #100	; 0x64
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	4909      	ldr	r1, [pc, #36]	; (8000de4 <USART6_IRQHandler+0x94>)
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <USART6_IRQHandler+0x90>)
 8000dc2:	f002 fad3 	bl	800336c <HAL_UART_Transmit>
		}

	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <USART6_IRQHandler+0x90>)
 8000dc8:	f002 fb64 	bl	8003494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000e0 	.word	0x200000e0
 8000dd4:	20000034 	.word	0x20000034
 8000dd8:	40011400 	.word	0x40011400
 8000ddc:	200001fc 	.word	0x200001fc
 8000de0:	20000178 	.word	0x20000178
 8000de4:	20000000 	.word	0x20000000

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f003 f95a 	bl	80040d0 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20050000 	.word	0x20050000
 8000e48:	00016000 	.word	0x00016000
 8000e4c:	200000d4 	.word	0x200000d4
 8000e50:	20000218 	.word	0x20000218

08000e54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e7c:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7e:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e94:	4c0b      	ldr	r4, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ea2:	f7ff ffd7 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f003 f919 	bl	80040dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fbaf 	bl	800060c <main>
  bx  lr    
 8000eae:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000eb0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000ebc:	08004bc0 	.word	0x08004bc0
  ldr r2, =_sbss
 8000ec0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000ec4:	20000214 	.word	0x20000214

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x34>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_Init+0x34>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x34>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x34>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f94f 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fe30 	bl	8000b58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f967 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f92f 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000048 	.word	0x20000048
 8000f5c:	20000050 	.word	0x20000050
 8000f60:	2000004c 	.word	0x2000004c

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000050 	.word	0x20000050
 8000f88:	20000200 	.word	0x20000200

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000200 	.word	0x20000200

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000050 	.word	0x20000050

08000fec <__NVIC_SetPriorityGrouping>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <__NVIC_SetPriorityGrouping+0x40>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	4313      	orrs	r3, r2
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x40>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	05fa0000 	.word	0x05fa0000

08001034 <__NVIC_GetPriorityGrouping>:
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4907      	ldr	r1, [pc, #28]	; (8001088 <__NVIC_EnableIRQ+0x38>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff29 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff3e 	bl	8001034 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff31 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa2 	bl	8001148 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e054      	b.n	80012cc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7f5b      	ldrb	r3, [r3, #29]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d105      	bne.n	8001238 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fcb4 	bl	8000ba0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2202      	movs	r2, #2
 800123c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	791b      	ldrb	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <HAL_CRC_Init+0xc4>)
 800124c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0218 	bic.w	r2, r2, #24
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	e00c      	b.n	800127a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	461a      	mov	r2, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f834 	bl	80012d8 <HAL_CRCEx_Polynomial_Set>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e028      	b.n	80012cc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	795b      	ldrb	r3, [r3, #5]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f04f 32ff 	mov.w	r2, #4294967295
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	e004      	b.n	8001298 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6912      	ldr	r2, [r2, #16]
 8001296:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	04c11db7 	.word	0x04c11db7

080012d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80012d8:	b480      	push	{r7}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80012e8:	231f      	movs	r3, #31
 80012ea:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80012ec:	bf00      	nop
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	613a      	str	r2, [r7, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <HAL_CRCEx_Polynomial_Set+0x34>
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_CRCEx_Polynomial_Set+0x16>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b18      	cmp	r3, #24
 8001310:	d846      	bhi.n	80013a0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a1 	.word	0x080013a1
 8001320:	080013a1 	.word	0x080013a1
 8001324:	080013a1 	.word	0x080013a1
 8001328:	080013a1 	.word	0x080013a1
 800132c:	080013a1 	.word	0x080013a1
 8001330:	080013a1 	.word	0x080013a1
 8001334:	080013a1 	.word	0x080013a1
 8001338:	08001395 	.word	0x08001395
 800133c:	080013a1 	.word	0x080013a1
 8001340:	080013a1 	.word	0x080013a1
 8001344:	080013a1 	.word	0x080013a1
 8001348:	080013a1 	.word	0x080013a1
 800134c:	080013a1 	.word	0x080013a1
 8001350:	080013a1 	.word	0x080013a1
 8001354:	080013a1 	.word	0x080013a1
 8001358:	08001389 	.word	0x08001389
 800135c:	080013a1 	.word	0x080013a1
 8001360:	080013a1 	.word	0x080013a1
 8001364:	080013a1 	.word	0x080013a1
 8001368:	080013a1 	.word	0x080013a1
 800136c:	080013a1 	.word	0x080013a1
 8001370:	080013a1 	.word	0x080013a1
 8001374:	080013a1 	.word	0x080013a1
 8001378:	0800137d 	.word	0x0800137d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b06      	cmp	r3, #6
 8001380:	d913      	bls.n	80013aa <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001386:	e010      	b.n	80013aa <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	2b07      	cmp	r3, #7
 800138c:	d90f      	bls.n	80013ae <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001392:	e00c      	b.n	80013ae <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	d90b      	bls.n	80013b2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800139e:	e008      	b.n	80013b2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	75fb      	strb	r3, [r7, #23]
      break;
 80013a4:	e006      	b.n	80013b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80013a6:	bf00      	nop
 80013a8:	e004      	b.n	80013b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80013aa:	bf00      	nop
 80013ac:	e002      	b.n	80013b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80013ae:	bf00      	nop
 80013b0:	e000      	b.n	80013b4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80013b2:	bf00      	nop
  }
  if (status == HAL_OK)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10d      	bne.n	80013d6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 0118 	bic.w	r1, r3, #24
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013f2:	f7ff fdcb 	bl	8000f8c <HAL_GetTick>
 80013f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d008      	beq.n	8001416 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e052      	b.n	80014bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0216 	bic.w	r2, r2, #22
 8001424:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001434:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_DMA_Abort+0x62>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0208 	bic.w	r2, r2, #8
 8001454:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001466:	e013      	b.n	8001490 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001468:	f7ff fd90 	bl	8000f8c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b05      	cmp	r3, #5
 8001474:	d90c      	bls.n	8001490 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2220      	movs	r2, #32
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e015      	b.n	80014bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1e4      	bne.n	8001468 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a2:	223f      	movs	r2, #63	; 0x3f
 80014a4:	409a      	lsls	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d004      	beq.n	80014e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00c      	b.n	80014fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2205      	movs	r2, #5
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
 8001526:	e175      	b.n	8001814 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001528:	2201      	movs	r2, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8164 	bne.w	800180e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00b      	beq.n	8001566 <HAL_GPIO_Init+0x5e>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155a:	2b11      	cmp	r3, #17
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b12      	cmp	r3, #18
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x100>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d123      	bne.n	8001650 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	08da      	lsrs	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3208      	adds	r2, #8
 8001610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	08da      	lsrs	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3208      	adds	r2, #8
 800164a:	69b9      	ldr	r1, [r7, #24]
 800164c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80be 	beq.w	800180e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_GPIO_Init+0x324>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_GPIO_Init+0x324>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_GPIO_Init+0x324>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016aa:	4a61      	ldr	r2, [pc, #388]	; (8001830 <HAL_GPIO_Init+0x328>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_GPIO_Init+0x32c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d037      	beq.n	8001746 <HAL_GPIO_Init+0x23e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a57      	ldr	r2, [pc, #348]	; (8001838 <HAL_GPIO_Init+0x330>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d031      	beq.n	8001742 <HAL_GPIO_Init+0x23a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a56      	ldr	r2, [pc, #344]	; (800183c <HAL_GPIO_Init+0x334>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d02b      	beq.n	800173e <HAL_GPIO_Init+0x236>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a55      	ldr	r2, [pc, #340]	; (8001840 <HAL_GPIO_Init+0x338>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d025      	beq.n	800173a <HAL_GPIO_Init+0x232>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a54      	ldr	r2, [pc, #336]	; (8001844 <HAL_GPIO_Init+0x33c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <HAL_GPIO_Init+0x22e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a53      	ldr	r2, [pc, #332]	; (8001848 <HAL_GPIO_Init+0x340>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_Init+0x22a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x344>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x226>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_GPIO_Init+0x348>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x222>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_GPIO_Init+0x34c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x21e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_GPIO_Init+0x350>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x21a>
 800171e:	2309      	movs	r3, #9
 8001720:	e012      	b.n	8001748 <HAL_GPIO_Init+0x240>
 8001722:	230a      	movs	r3, #10
 8001724:	e010      	b.n	8001748 <HAL_GPIO_Init+0x240>
 8001726:	2308      	movs	r3, #8
 8001728:	e00e      	b.n	8001748 <HAL_GPIO_Init+0x240>
 800172a:	2307      	movs	r3, #7
 800172c:	e00c      	b.n	8001748 <HAL_GPIO_Init+0x240>
 800172e:	2306      	movs	r3, #6
 8001730:	e00a      	b.n	8001748 <HAL_GPIO_Init+0x240>
 8001732:	2305      	movs	r3, #5
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x240>
 8001736:	2304      	movs	r3, #4
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x240>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x240>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x240>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x240>
 8001746:	2300      	movs	r3, #0
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f002 0203 	and.w	r2, r2, #3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	; (8001830 <HAL_GPIO_Init+0x328>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_GPIO_Init+0x354>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178a:	4a34      	ldr	r2, [pc, #208]	; (800185c <HAL_GPIO_Init+0x354>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001790:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_GPIO_Init+0x354>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b4:	4a29      	ldr	r2, [pc, #164]	; (800185c <HAL_GPIO_Init+0x354>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_GPIO_Init+0x354>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017de:	4a1f      	ldr	r2, [pc, #124]	; (800185c <HAL_GPIO_Init+0x354>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_GPIO_Init+0x354>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_GPIO_Init+0x354>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	f67f ae86 	bls.w	8001528 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40021400 	.word	0x40021400
 800184c:	40021800 	.word	0x40021800
 8001850:	40021c00 	.word	0x40021c00
 8001854:	40022000 	.word	0x40022000
 8001858:	40022400 	.word	0x40022400
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018a4:	887a      	ldrh	r2, [r7, #2]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	041a      	lsls	r2, r3, #16
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	400b      	ands	r3, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	619a      	str	r2, [r3, #24]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	4013      	ands	r3, r2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f918 	bl	8000b1c <HAL_GPIO_EXTI_Callback>
  }
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013c00 	.word	0x40013c00

080018f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_PWREx_EnableOverDrive+0x98>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_PWREx_EnableOverDrive+0x98>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_PWREx_EnableOverDrive+0x98>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_PWREx_EnableOverDrive+0x9c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001926:	f7ff fb31 	bl	8000f8c <HAL_GetTick>
 800192a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800192c:	e009      	b.n	8001942 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800192e:	f7ff fb2d 	bl	8000f8c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193c:	d901      	bls.n	8001942 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e022      	b.n	8001988 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194e:	d1ee      	bne.n	800192e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195c:	f7ff fb16 	bl	8000f8c <HAL_GetTick>
 8001960:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001962:	e009      	b.n	8001978 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001964:	f7ff fb12 	bl	8000f8c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	d901      	bls.n	8001978 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e007      	b.n	8001988 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_PWREx_EnableOverDrive+0x9c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001984:	d1ee      	bne.n	8001964 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000

08001998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e291      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8087 	beq.w	8001aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	4b96      	ldr	r3, [pc, #600]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c8:	4b93      	ldr	r3, [pc, #588]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d112      	bne.n	80019fa <HAL_RCC_OscConfig+0x62>
 80019d4:	4b90      	ldr	r3, [pc, #576]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e0:	d10b      	bne.n	80019fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x130>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d168      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e26b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x7a>
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0xd8>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x9c>
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7e      	ldr	r2, [pc, #504]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b7c      	ldr	r3, [pc, #496]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7b      	ldr	r2, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xd8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0xc0>
 8001a3e:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a75      	ldr	r2, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a72      	ldr	r2, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xd8>
 8001a58:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6b      	ldr	r2, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fa88 	bl	8000f8c <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fa84 	bl	8000f8c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e21f      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe8>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fa74 	bl	8000f8c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fa70 	bl	8000f8c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e20b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x110>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d069      	beq.n	8001baa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x190>
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1df      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	493d      	ldr	r1, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e040      	b.n	8001baa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fa26 	bl	8000f8c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff fa22 	bl	8000f8c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1bd      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4929      	ldr	r1, [pc, #164]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
 8001b76:	e018      	b.n	8001baa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fa02 	bl	8000f8c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f9fe 	bl	8000f8c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e199      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d038      	beq.n	8001c28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d019      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bca:	f7ff f9df 	bl	8000f8c <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f9db 	bl	8000f8c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e176      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x23a>
 8001bf0:	e01a      	b.n	8001c28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f9c5 	bl	8000f8c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7ff f9c1 	bl	8000f8c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d903      	bls.n	8001c1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e15c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
 8001c18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b91      	ldr	r3, [pc, #580]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ee      	bne.n	8001c06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a4 	beq.w	8001d7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5e:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff f989 	bl	8000f8c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff f985 	bl	8000f8c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e120      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x31a>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x33c>
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x35e>
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff f939 	bl	8000f8c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff f935 	bl	8000f8c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0ce      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x386>
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff f923 	bl	8000f8c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff f91f 	bl	8000f8c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0b8      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80a4 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d06b      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d149      	bne.n	8001e30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a30      	ldr	r2, [pc, #192]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f8f0 	bl	8000f8c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f8ec 	bl	8000f8c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e087      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	3b01      	subs	r3, #1
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	4313      	orrs	r3, r2
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001df6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dfa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8c0 	bl	8000f8c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f8bc 	bl	8000f8c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e057      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x478>
 8001e2e:	e04f      	b.n	8001ed0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f8a6 	bl	8000f8c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff f8a2 	bl	8000f8c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e03d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_OscConfig+0x4cc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4ac>
 8001e62:	e035      	b.n	8001ed0 <HAL_RCC_OscConfig+0x538>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_OscConfig+0x544>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d028      	beq.n	8001ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d121      	bne.n	8001ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d11a      	bne.n	8001ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d111      	bne.n	8001ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0d0      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 020f 	bic.w	r2, r3, #15
 8001f0e:	4965      	ldr	r1, [pc, #404]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d040      	beq.n	8002004 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e073      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06b      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4936      	ldr	r1, [pc, #216]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd4:	f7fe ffda 	bl	8000f8c <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe ffd6 	bl	8000f8c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e053      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d210      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 020f 	bic.w	r2, r3, #15
 800201a:	4922      	ldr	r1, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1cc>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1d0>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe ff36 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08004b34 	.word	0x08004b34
 80020b0:	20000048 	.word	0x20000048
 80020b4:	2000004c 	.word	0x2000004c

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b5b0      	push	{r4, r5, r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020be:	2100      	movs	r1, #0
 80020c0:	6079      	str	r1, [r7, #4]
 80020c2:	2100      	movs	r1, #0
 80020c4:	60f9      	str	r1, [r7, #12]
 80020c6:	2100      	movs	r1, #0
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020ca:	2100      	movs	r1, #0
 80020cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ce:	4952      	ldr	r1, [pc, #328]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 80020d0:	6889      	ldr	r1, [r1, #8]
 80020d2:	f001 010c 	and.w	r1, r1, #12
 80020d6:	2908      	cmp	r1, #8
 80020d8:	d00d      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80020da:	2908      	cmp	r1, #8
 80020dc:	f200 8094 	bhi.w	8002208 <HAL_RCC_GetSysClockFreq+0x150>
 80020e0:	2900      	cmp	r1, #0
 80020e2:	d002      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x32>
 80020e4:	2904      	cmp	r1, #4
 80020e6:	d003      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x38>
 80020e8:	e08e      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020ea:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_GetSysClockFreq+0x164>)
 80020ec:	60bb      	str	r3, [r7, #8]
      break;
 80020ee:	e08e      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f0:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <HAL_RCC_GetSysClockFreq+0x168>)
 80020f2:	60bb      	str	r3, [r7, #8]
      break;
 80020f4:	e08b      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f6:	4948      	ldr	r1, [pc, #288]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 80020f8:	6849      	ldr	r1, [r1, #4]
 80020fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80020fe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002100:	4945      	ldr	r1, [pc, #276]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 8002102:	6849      	ldr	r1, [r1, #4]
 8002104:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002108:	2900      	cmp	r1, #0
 800210a:	d024      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210c:	4942      	ldr	r1, [pc, #264]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 800210e:	6849      	ldr	r1, [r1, #4]
 8002110:	0989      	lsrs	r1, r1, #6
 8002112:	4608      	mov	r0, r1
 8002114:	f04f 0100 	mov.w	r1, #0
 8002118:	f240 14ff 	movw	r4, #511	; 0x1ff
 800211c:	f04f 0500 	mov.w	r5, #0
 8002120:	ea00 0204 	and.w	r2, r0, r4
 8002124:	ea01 0305 	and.w	r3, r1, r5
 8002128:	493d      	ldr	r1, [pc, #244]	; (8002220 <HAL_RCC_GetSysClockFreq+0x168>)
 800212a:	fb01 f003 	mul.w	r0, r1, r3
 800212e:	2100      	movs	r1, #0
 8002130:	fb01 f102 	mul.w	r1, r1, r2
 8002134:	1844      	adds	r4, r0, r1
 8002136:	493a      	ldr	r1, [pc, #232]	; (8002220 <HAL_RCC_GetSysClockFreq+0x168>)
 8002138:	fba2 0101 	umull	r0, r1, r2, r1
 800213c:	1863      	adds	r3, r4, r1
 800213e:	4619      	mov	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	461a      	mov	r2, r3
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	f7fe f866 	bl	8000218 <__aeabi_uldivmod>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4613      	mov	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e04a      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002156:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	461a      	mov	r2, r3
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	ea02 0400 	and.w	r4, r2, r0
 800216e:	ea03 0501 	and.w	r5, r3, r1
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	014b      	lsls	r3, r1, #5
 8002180:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002184:	0142      	lsls	r2, r0, #5
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	1b00      	subs	r0, r0, r4
 800218c:	eb61 0105 	sbc.w	r1, r1, r5
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	018b      	lsls	r3, r1, #6
 800219a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800219e:	0182      	lsls	r2, r0, #6
 80021a0:	1a12      	subs	r2, r2, r0
 80021a2:	eb63 0301 	sbc.w	r3, r3, r1
 80021a6:	f04f 0000 	mov.w	r0, #0
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	00d9      	lsls	r1, r3, #3
 80021b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021b4:	00d0      	lsls	r0, r2, #3
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	1912      	adds	r2, r2, r4
 80021bc:	eb45 0303 	adc.w	r3, r5, r3
 80021c0:	f04f 0000 	mov.w	r0, #0
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	0299      	lsls	r1, r3, #10
 80021ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ce:	0290      	lsls	r0, r2, #10
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	461a      	mov	r2, r3
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	f7fe f81a 	bl	8000218 <__aeabi_uldivmod>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4613      	mov	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	3301      	adds	r3, #1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	fbb2 f3f3 	udiv	r3, r2, r3
 8002204:	60bb      	str	r3, [r7, #8]
      break;
 8002206:	e002      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_GetSysClockFreq+0x164>)
 800220a:	60bb      	str	r3, [r7, #8]
      break;
 800220c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220e:	68bb      	ldr	r3, [r7, #8]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bdb0      	pop	{r4, r5, r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	00f42400 	.word	0x00f42400
 8002220:	017d7840 	.word	0x017d7840

08002224 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000048 	.word	0x20000048

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	08004b44 	.word	0x08004b44

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffdc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	08004b44 	.word	0x08004b44

0800228c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d012      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022b4:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022be:	6093      	str	r3, [r2, #8]
 80022c0:	4b66      	ldr	r3, [pc, #408]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	4964      	ldr	r1, [pc, #400]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d017      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e6:	4b5d      	ldr	r3, [pc, #372]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	4959      	ldr	r1, [pc, #356]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002312:	2301      	movs	r3, #1
 8002314:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d017      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002322:	4b4e      	ldr	r3, [pc, #312]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002328:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	494a      	ldr	r1, [pc, #296]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 808b 	beq.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a39      	ldr	r2, [pc, #228]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
 800237c:	4b37      	ldr	r3, [pc, #220]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a34      	ldr	r2, [pc, #208]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002394:	f7fe fdfa 	bl	8000f8c <HAL_GetTick>
 8002398:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7fe fdf6 	bl	8000f8c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e357      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ae:	4b2c      	ldr	r3, [pc, #176]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d035      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d02e      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d8:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023fa:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d114      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fdbe 	bl	8000f8c <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fdba 	bl	8000f8c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e319      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ee      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002442:	d111      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002452:	400b      	ands	r3, r1
 8002454:	4901      	ldr	r1, [pc, #4]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
 800245a:	e00b      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000
 8002464:	0ffffcff 	.word	0x0ffffcff
 8002468:	4bb1      	ldr	r3, [pc, #708]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4ab0      	ldr	r2, [pc, #704]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800246e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002472:	6093      	str	r3, [r2, #8]
 8002474:	4bae      	ldr	r3, [pc, #696]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	49ab      	ldr	r1, [pc, #684]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002492:	4ba7      	ldr	r3, [pc, #668]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002498:	4aa5      	ldr	r2, [pc, #660]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800249a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024a2:	4ba3      	ldr	r3, [pc, #652]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	49a0      	ldr	r1, [pc, #640]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c0:	4b9b      	ldr	r3, [pc, #620]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ce:	4998      	ldr	r1, [pc, #608]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e2:	4b93      	ldr	r3, [pc, #588]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f0:	498f      	ldr	r1, [pc, #572]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002504:	4b8a      	ldr	r3, [pc, #552]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002512:	4987      	ldr	r1, [pc, #540]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002526:	4b82      	ldr	r3, [pc, #520]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	497e      	ldr	r1, [pc, #504]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002548:	4b79      	ldr	r3, [pc, #484]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4976      	ldr	r1, [pc, #472]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800256a:	4b71      	ldr	r3, [pc, #452]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f023 020c 	bic.w	r2, r3, #12
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002578:	496d      	ldr	r1, [pc, #436]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	4965      	ldr	r1, [pc, #404]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ae:	4b60      	ldr	r3, [pc, #384]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025bc:	495c      	ldr	r1, [pc, #368]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025d0:	4b57      	ldr	r3, [pc, #348]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	4954      	ldr	r1, [pc, #336]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025f2:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	494b      	ldr	r1, [pc, #300]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002614:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	4943      	ldr	r1, [pc, #268]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002644:	493a      	ldr	r1, [pc, #232]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002658:	4b35      	ldr	r3, [pc, #212]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002666:	4932      	ldr	r1, [pc, #200]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d011      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002688:	4929      	ldr	r1, [pc, #164]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002698:	d101      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c8:	4919      	ldr	r1, [pc, #100]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ec:	4910      	ldr	r1, [pc, #64]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d006      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80d9 	beq.w	80028ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a08      	ldr	r2, [pc, #32]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800270e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002714:	f7fe fc3a 	bl	8000f8c <HAL_GetTick>
 8002718:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800271a:	e00b      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800271c:	f7fe fc36 	bl	8000f8c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d904      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e197      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ed      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d021      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	2b00      	cmp	r3, #0
 8002752:	d11d      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002754:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002768:	0e1b      	lsrs	r3, r3, #24
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	019a      	lsls	r2, r3, #6
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	061b      	lsls	r3, r3, #24
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	071b      	lsls	r3, r3, #28
 8002788:	4957      	ldr	r1, [pc, #348]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02e      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ba:	d129      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027bc:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	0c1b      	lsrs	r3, r3, #16
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d0:	0f1b      	lsrs	r3, r3, #28
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	019a      	lsls	r2, r3, #6
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	431a      	orrs	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	071b      	lsls	r3, r3, #28
 80027f0:	493d      	ldr	r1, [pc, #244]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027fe:	f023 021f 	bic.w	r2, r3, #31
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	3b01      	subs	r3, #1
 8002808:	4937      	ldr	r1, [pc, #220]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01d      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800281c:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002822:	0e1b      	lsrs	r3, r3, #24
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002830:	0f1b      	lsrs	r3, r3, #28
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	019a      	lsls	r2, r3, #6
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	431a      	orrs	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	431a      	orrs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	071b      	lsls	r3, r3, #28
 8002850:	4925      	ldr	r1, [pc, #148]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d011      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	019a      	lsls	r2, r3, #6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	071b      	lsls	r3, r3, #28
 8002880:	4919      	ldr	r1, [pc, #100]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fb7a 	bl	8000f8c <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800289c:	f7fe fb76 	bl	8000f8c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0d7      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f040 80cd 	bne.w	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ce:	f7fe fb5d 	bl	8000f8c <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028d6:	f7fe fb59 	bl	8000f8c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b64      	cmp	r3, #100	; 0x64
 80028e2:	d903      	bls.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0ba      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80028e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028ec:	4b5e      	ldr	r3, [pc, #376]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f8:	d0ed      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02e      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d12a      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002922:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002930:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	0f1b      	lsrs	r3, r3, #28
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	019a      	lsls	r2, r3, #6
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	071b      	lsls	r3, r3, #28
 8002956:	4944      	ldr	r1, [pc, #272]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800295e:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002964:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	493d      	ldr	r1, [pc, #244]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d022      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298c:	d11d      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	0e1b      	lsrs	r3, r3, #24
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800299c:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	0f1b      	lsrs	r3, r3, #28
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	019a      	lsls	r2, r3, #6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	431a      	orrs	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	061b      	lsls	r3, r3, #24
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	071b      	lsls	r3, r3, #28
 80029c2:	4929      	ldr	r1, [pc, #164]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d028      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029d6:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	0e1b      	lsrs	r3, r3, #24
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029e4:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	0c1b      	lsrs	r3, r3, #16
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	019a      	lsls	r2, r3, #6
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	071b      	lsls	r3, r3, #28
 8002a0a:	4917      	ldr	r1, [pc, #92]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	4911      	ldr	r1, [pc, #68]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe faaa 	bl	8000f8c <HAL_GetTick>
 8002a38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a3c:	f7fe faa6 	bl	8000f8c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e007      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5a:	d1ef      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e081      	b.n	8002b82 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7f5b      	ldrb	r3, [r3, #29]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe f8a6 	bl	8000be0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	22ca      	movs	r2, #202	; 0xca
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2253      	movs	r2, #83	; 0x53
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f898 	bl	8002be0 <RTC_EnterInitMode>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e05c      	b.n	8002b82 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6899      	ldr	r1, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RTC_Init+0x120>)
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6919      	ldr	r1, [r3, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	041a      	lsls	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b22:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10e      	bne.n	8002b50 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f82c 	bl	8002b90 <HAL_RTC_WaitForSynchro>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	22ff      	movs	r2, #255	; 0xff
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e018      	b.n	8002b82 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0208 	bic.w	r2, r2, #8
 8002b5e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	ff8fffbf 	.word	0xff8fffbf

08002b90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002baa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fe f9ee 	bl	8000f8c <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bb2:	e009      	b.n	8002bc8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bb4:	f7fe f9ea 	bl	8000f8c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e007      	b.n	8002bd8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002c02:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fe f9c2 	bl	8000f8c <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c0a:	e009      	b.n	8002c20 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c0c:	f7fe f9be 	bl	8000f8c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1a:	d901      	bls.n	8002c20 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e007      	b.n	8002c30 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0ee      	beq.n	8002c0c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	7f1b      	ldrb	r3, [r3, #28]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e062      	b.n	8002d1a <HAL_RTCEx_SetWakeUpTimer+0xe2>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	22ca      	movs	r2, #202	; 0xca
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2253      	movs	r2, #83	; 0x53
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7fe f984 	bl	8000f8c <HAL_GetTick>
 8002c84:	6178      	str	r0, [r7, #20]

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002c94:	e013      	b.n	8002cbe <HAL_RTCEx_SetWakeUpTimer+0x86>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c96:	f7fe f979 	bl	8000f8c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca4:	d90b      	bls.n	8002cbe <HAL_RTCEx_SetWakeUpTimer+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e02d      	b.n	8002d1a <HAL_RTCEx_SetWakeUpTimer+0xe2>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0e4      	beq.n	8002c96 <HAL_RTCEx_SetWakeUpTimer+0x5e>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0207 	bic.w	r2, r2, #7
 8002cda:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d02:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e049      	b.n	8002dc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fd ff63 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f000 f877 	bl	8002e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e031      	b.n	8002e4c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8ca 	bl	8002f94 <TIM_SlaveTimer_SetConfig>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e018      	b.n	8002e4c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e28:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e38:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a40      	ldr	r2, [pc, #256]	; (8002f68 <TIM_Base_SetConfig+0x114>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3d      	ldr	r2, [pc, #244]	; (8002f6c <TIM_Base_SetConfig+0x118>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <TIM_Base_SetConfig+0x11c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <TIM_Base_SetConfig+0x120>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x40>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3a      	ldr	r2, [pc, #232]	; (8002f78 <TIM_Base_SetConfig+0x124>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <TIM_Base_SetConfig+0x114>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d02b      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d027      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <TIM_Base_SetConfig+0x118>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d023      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <TIM_Base_SetConfig+0x11c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <TIM_Base_SetConfig+0x120>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01b      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <TIM_Base_SetConfig+0x124>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d017      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <TIM_Base_SetConfig+0x128>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <TIM_Base_SetConfig+0x12c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00f      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a26      	ldr	r2, [pc, #152]	; (8002f84 <TIM_Base_SetConfig+0x130>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <TIM_Base_SetConfig+0x134>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <TIM_Base_SetConfig+0x138>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <TIM_Base_SetConfig+0x13c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <TIM_Base_SetConfig+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0xf8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <TIM_Base_SetConfig+0x124>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d103      	bne.n	8002f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	615a      	str	r2, [r3, #20]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40000c00 	.word	0x40000c00
 8002f78:	40010400 	.word	0x40010400
 8002f7c:	40014000 	.word	0x40014000
 8002f80:	40014400 	.word	0x40014400
 8002f84:	40014800 	.word	0x40014800
 8002f88:	40001800 	.word	0x40001800
 8002f8c:	40001c00 	.word	0x40001c00
 8002f90:	40002000 	.word	0x40002000

08002f94 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fac:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <TIM_SlaveTimer_SetConfig+0x11c>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b70      	cmp	r3, #112	; 0x70
 8002fd8:	d01a      	beq.n	8003010 <TIM_SlaveTimer_SetConfig+0x7c>
 8002fda:	2b70      	cmp	r3, #112	; 0x70
 8002fdc:	d860      	bhi.n	80030a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002fde:	2b60      	cmp	r3, #96	; 0x60
 8002fe0:	d054      	beq.n	800308c <TIM_SlaveTimer_SetConfig+0xf8>
 8002fe2:	2b60      	cmp	r3, #96	; 0x60
 8002fe4:	d85c      	bhi.n	80030a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002fe6:	2b50      	cmp	r3, #80	; 0x50
 8002fe8:	d046      	beq.n	8003078 <TIM_SlaveTimer_SetConfig+0xe4>
 8002fea:	2b50      	cmp	r3, #80	; 0x50
 8002fec:	d858      	bhi.n	80030a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d019      	beq.n	8003026 <TIM_SlaveTimer_SetConfig+0x92>
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d854      	bhi.n	80030a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002ff6:	2b30      	cmp	r3, #48	; 0x30
 8002ff8:	d054      	beq.n	80030a4 <TIM_SlaveTimer_SetConfig+0x110>
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d850      	bhi.n	80030a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d050      	beq.n	80030a4 <TIM_SlaveTimer_SetConfig+0x110>
 8003002:	2b20      	cmp	r3, #32
 8003004:	d84c      	bhi.n	80030a0 <TIM_SlaveTimer_SetConfig+0x10c>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d04c      	beq.n	80030a4 <TIM_SlaveTimer_SetConfig+0x110>
 800300a:	2b10      	cmp	r3, #16
 800300c:	d04a      	beq.n	80030a4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800300e:	e047      	b.n	80030a0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68d9      	ldr	r1, [r3, #12]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f000 f8a7 	bl	8003172 <TIM_ETR_SetConfig>
      break;
 8003024:	e03f      	b.n	80030a6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b05      	cmp	r3, #5
 800302c:	d101      	bne.n	8003032 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e03a      	b.n	80030a8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003058:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	621a      	str	r2, [r3, #32]
      break;
 8003076:	e016      	b.n	80030a6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	461a      	mov	r2, r3
 8003086:	f000 f815 	bl	80030b4 <TIM_TI1_ConfigInputStage>
      break;
 800308a:	e00c      	b.n	80030a6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	461a      	mov	r2, r3
 800309a:	f000 f83a 	bl	8003112 <TIM_TI2_ConfigInputStage>
      break;
 800309e:	e002      	b.n	80030a6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80030a4:	bf00      	nop
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	fffefff8 	.word	0xfffefff8

080030b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 030a 	bic.w	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0210 	bic.w	r2, r3, #16
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800313c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	031b      	lsls	r3, r3, #12
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800314e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003172:	b480      	push	{r7}
 8003174:	b087      	sub	sp, #28
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	431a      	orrs	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4313      	orrs	r3, r2
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	609a      	str	r2, [r3, #8]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e06d      	b.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2f      	ldr	r2, [pc, #188]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003206:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003218:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d022      	beq.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d01d      	beq.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d018      	beq.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a15      	ldr	r2, [pc, #84]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d10c      	bne.n	8003296 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003282:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40010400 	.word	0x40010400
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40014000 	.word	0x40014000
 80032cc:	40001800 	.word	0x40001800

080032d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e040      	b.n	8003364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fcae 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 facc 	bl	80038ac <UART_SetConfig>
 8003314:	4603      	mov	r3, r0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e022      	b.n	8003364 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fd22 	bl	8003d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800333a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800334a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fda9 	bl	8003eb4 <UART_CheckIdleState>
 8003362:	4603      	mov	r3, r0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003380:	2b20      	cmp	r3, #32
 8003382:	f040 8081 	bne.w	8003488 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_UART_Transmit+0x26>
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e079      	b.n	800348a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Transmit+0x38>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e072      	b.n	800348a <HAL_UART_Transmit+0x11e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2221      	movs	r2, #33	; 0x21
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ba:	f7fd fde7 	bl	8000f8c <HAL_GetTick>
 80033be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d108      	bne.n	80033ec <HAL_UART_Transmit+0x80>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	e003      	b.n	80033f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033fc:	e02c      	b.n	8003458 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fd86 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e038      	b.n	800348a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10b      	bne.n	8003436 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3302      	adds	r3, #2
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	e007      	b.n	8003446 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	3301      	adds	r3, #1
 8003444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1cc      	bne.n	80033fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2200      	movs	r2, #0
 800346c:	2140      	movs	r1, #64	; 0x40
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fd53 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e005      	b.n	800348a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e000      	b.n	800348a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d113      	bne.n	80034ec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00e      	beq.n	80034ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 81b9 	beq.w	8003854 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
      }
      return;
 80034ea:	e1b3      	b.n	8003854 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80e3 	beq.w	80036ba <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4ba5      	ldr	r3, [pc, #660]	; (8003798 <HAL_UART_IRQHandler+0x304>)
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80d8 	beq.w	80036ba <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_UART_IRQHandler+0xa2>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2201      	movs	r2, #1
 8003524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <HAL_UART_IRQHandler+0xce>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d010      	beq.n	800358e <HAL_UART_IRQHandler+0xfa>
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00b      	beq.n	800358e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2204      	movs	r2, #4
 800357c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003584:	f043 0202 	orr.w	r2, r3, #2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d015      	beq.n	80035c4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2208      	movs	r2, #8
 80035b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ba:	f043 0208 	orr.w	r2, r3, #8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d011      	beq.n	80035f2 <HAL_UART_IRQHandler+0x15e>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 812d 	beq.w	8003858 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00c      	beq.n	8003622 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003628:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d004      	beq.n	8003642 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800363e:	2b00      	cmp	r3, #0
 8003640:	d031      	beq.n	80036a6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fce5 	bl	8004012 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d123      	bne.n	800369e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003664:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	2b00      	cmp	r3, #0
 800366c:	d013      	beq.n	8003696 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a4a      	ldr	r2, [pc, #296]	; (800379c <HAL_UART_IRQHandler+0x308>)
 8003674:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd ff22 	bl	80014c4 <HAL_DMA_Abort_IT>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003690:	4610      	mov	r0, r2
 8003692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003694:	e00f      	b.n	80036b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8f2 	bl	8003880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	e00b      	b.n	80036b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8ee 	bl	8003880 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	e007      	b.n	80036b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8ea 	bl	8003880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80036b4:	e0d0      	b.n	8003858 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b6:	bf00      	nop
    return;
 80036b8:	e0ce      	b.n	8003858 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	2b01      	cmp	r3, #1
 80036c0:	f040 80a7 	bne.w	8003812 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a1 	beq.w	8003812 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 809b 	beq.w	8003812 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2210      	movs	r2, #16
 80036e2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	d156      	bne.n	80037a0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80ac 	beq.w	800385c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800370a:	893a      	ldrh	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	f080 80a5 	bcs.w	800385c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	893a      	ldrh	r2, [r7, #8]
 8003716:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003724:	d02a      	beq.n	800377c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003754:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0210 	bic.w	r2, r2, #16
 8003770:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fe34 	bl	80013e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003788:	b29b      	uxth	r3, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	b29b      	uxth	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f87f 	bl	8003894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003796:	e061      	b.n	800385c <HAL_UART_IRQHandler+0x3c8>
 8003798:	04000120 	.word	0x04000120
 800379c:	08004071 	.word	0x08004071
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d050      	beq.n	8003860 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80037be:	897b      	ldrh	r3, [r7, #10]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d04d      	beq.n	8003860 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037d2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0210 	bic.w	r2, r2, #16
 8003804:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003806:	897b      	ldrh	r3, [r7, #10]
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f842 	bl	8003894 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003810:	e026      	b.n	8003860 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01a      	beq.n	8003864 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
    }
    return;
 8003836:	e015      	b.n	8003864 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d011      	beq.n	8003866 <HAL_UART_IRQHandler+0x3d2>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00c      	beq.n	8003866 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fc25 	bl	800409c <UART_EndTransmit_IT>
    return;
 8003852:	e008      	b.n	8003866 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003854:	bf00      	nop
 8003856:	e006      	b.n	8003866 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003858:	bf00      	nop
 800385a:	e004      	b.n	8003866 <HAL_UART_IRQHandler+0x3d2>
      return;
 800385c:	bf00      	nop
 800385e:	e002      	b.n	8003866 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003864:	bf00      	nop
  }

}
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4ba7      	ldr	r3, [pc, #668]	; (8003b74 <UART_SetConfig+0x2c8>)
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	430a      	orrs	r2, r1
 800391c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a95      	ldr	r2, [pc, #596]	; (8003b78 <UART_SetConfig+0x2cc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d120      	bne.n	800396a <UART_SetConfig+0xbe>
 8003928:	4b94      	ldr	r3, [pc, #592]	; (8003b7c <UART_SetConfig+0x2d0>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d816      	bhi.n	8003964 <UART_SetConfig+0xb8>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0x90>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800394d 	.word	0x0800394d
 8003940:	08003959 	.word	0x08003959
 8003944:	08003953 	.word	0x08003953
 8003948:	0800395f 	.word	0x0800395f
 800394c:	2301      	movs	r3, #1
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e14f      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003952:	2302      	movs	r3, #2
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e14c      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003958:	2304      	movs	r3, #4
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e149      	b.n	8003bf2 <UART_SetConfig+0x346>
 800395e:	2308      	movs	r3, #8
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e146      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003964:	2310      	movs	r3, #16
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e143      	b.n	8003bf2 <UART_SetConfig+0x346>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a84      	ldr	r2, [pc, #528]	; (8003b80 <UART_SetConfig+0x2d4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d132      	bne.n	80039da <UART_SetConfig+0x12e>
 8003974:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <UART_SetConfig+0x2d0>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d828      	bhi.n	80039d4 <UART_SetConfig+0x128>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <UART_SetConfig+0xdc>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039d5 	.word	0x080039d5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039c9 	.word	0x080039c9
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039c3 	.word	0x080039c3
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039d5 	.word	0x080039d5
 80039b8:	080039cf 	.word	0x080039cf
 80039bc:	2300      	movs	r3, #0
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e117      	b.n	8003bf2 <UART_SetConfig+0x346>
 80039c2:	2302      	movs	r3, #2
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e114      	b.n	8003bf2 <UART_SetConfig+0x346>
 80039c8:	2304      	movs	r3, #4
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e111      	b.n	8003bf2 <UART_SetConfig+0x346>
 80039ce:	2308      	movs	r3, #8
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e10e      	b.n	8003bf2 <UART_SetConfig+0x346>
 80039d4:	2310      	movs	r3, #16
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e10b      	b.n	8003bf2 <UART_SetConfig+0x346>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a69      	ldr	r2, [pc, #420]	; (8003b84 <UART_SetConfig+0x2d8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d120      	bne.n	8003a26 <UART_SetConfig+0x17a>
 80039e4:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <UART_SetConfig+0x2d0>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039ee:	2b30      	cmp	r3, #48	; 0x30
 80039f0:	d013      	beq.n	8003a1a <UART_SetConfig+0x16e>
 80039f2:	2b30      	cmp	r3, #48	; 0x30
 80039f4:	d814      	bhi.n	8003a20 <UART_SetConfig+0x174>
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d009      	beq.n	8003a0e <UART_SetConfig+0x162>
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d810      	bhi.n	8003a20 <UART_SetConfig+0x174>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <UART_SetConfig+0x15c>
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d006      	beq.n	8003a14 <UART_SetConfig+0x168>
 8003a06:	e00b      	b.n	8003a20 <UART_SetConfig+0x174>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e0f1      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e0ee      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a14:	2304      	movs	r3, #4
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e0eb      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e0e8      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e0e5      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a57      	ldr	r2, [pc, #348]	; (8003b88 <UART_SetConfig+0x2dc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d120      	bne.n	8003a72 <UART_SetConfig+0x1c6>
 8003a30:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <UART_SetConfig+0x2d0>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a3c:	d013      	beq.n	8003a66 <UART_SetConfig+0x1ba>
 8003a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a40:	d814      	bhi.n	8003a6c <UART_SetConfig+0x1c0>
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d009      	beq.n	8003a5a <UART_SetConfig+0x1ae>
 8003a46:	2b80      	cmp	r3, #128	; 0x80
 8003a48:	d810      	bhi.n	8003a6c <UART_SetConfig+0x1c0>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <UART_SetConfig+0x1a8>
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d006      	beq.n	8003a60 <UART_SetConfig+0x1b4>
 8003a52:	e00b      	b.n	8003a6c <UART_SetConfig+0x1c0>
 8003a54:	2300      	movs	r3, #0
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e0cb      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e0c8      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a60:	2304      	movs	r3, #4
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e0c5      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a66:	2308      	movs	r3, #8
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e0c2      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e0bf      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a45      	ldr	r2, [pc, #276]	; (8003b8c <UART_SetConfig+0x2e0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d125      	bne.n	8003ac8 <UART_SetConfig+0x21c>
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <UART_SetConfig+0x2d0>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8a:	d017      	beq.n	8003abc <UART_SetConfig+0x210>
 8003a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a90:	d817      	bhi.n	8003ac2 <UART_SetConfig+0x216>
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d00b      	beq.n	8003ab0 <UART_SetConfig+0x204>
 8003a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a9c:	d811      	bhi.n	8003ac2 <UART_SetConfig+0x216>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <UART_SetConfig+0x1fe>
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa6:	d006      	beq.n	8003ab6 <UART_SetConfig+0x20a>
 8003aa8:	e00b      	b.n	8003ac2 <UART_SetConfig+0x216>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e0a0      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e09d      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e09a      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003abc:	2308      	movs	r3, #8
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e097      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003ac2:	2310      	movs	r3, #16
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e094      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <UART_SetConfig+0x2e4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d125      	bne.n	8003b1e <UART_SetConfig+0x272>
 8003ad2:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <UART_SetConfig+0x2d0>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae0:	d017      	beq.n	8003b12 <UART_SetConfig+0x266>
 8003ae2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ae6:	d817      	bhi.n	8003b18 <UART_SetConfig+0x26c>
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aec:	d00b      	beq.n	8003b06 <UART_SetConfig+0x25a>
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d811      	bhi.n	8003b18 <UART_SetConfig+0x26c>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <UART_SetConfig+0x254>
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afc:	d006      	beq.n	8003b0c <UART_SetConfig+0x260>
 8003afe:	e00b      	b.n	8003b18 <UART_SetConfig+0x26c>
 8003b00:	2301      	movs	r3, #1
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e075      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b06:	2302      	movs	r3, #2
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e072      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e06f      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b12:	2308      	movs	r3, #8
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e06c      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e069      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <UART_SetConfig+0x2e8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d137      	bne.n	8003b98 <UART_SetConfig+0x2ec>
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <UART_SetConfig+0x2d0>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b36:	d017      	beq.n	8003b68 <UART_SetConfig+0x2bc>
 8003b38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b3c:	d817      	bhi.n	8003b6e <UART_SetConfig+0x2c2>
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b42:	d00b      	beq.n	8003b5c <UART_SetConfig+0x2b0>
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d811      	bhi.n	8003b6e <UART_SetConfig+0x2c2>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <UART_SetConfig+0x2aa>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	d006      	beq.n	8003b62 <UART_SetConfig+0x2b6>
 8003b54:	e00b      	b.n	8003b6e <UART_SetConfig+0x2c2>
 8003b56:	2300      	movs	r3, #0
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e04a      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e047      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b62:	2304      	movs	r3, #4
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e044      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e041      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e03e      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003b74:	efff69f3 	.word	0xefff69f3
 8003b78:	40011000 	.word	0x40011000
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40004400 	.word	0x40004400
 8003b84:	40004800 	.word	0x40004800
 8003b88:	40004c00 	.word	0x40004c00
 8003b8c:	40005000 	.word	0x40005000
 8003b90:	40011400 	.word	0x40011400
 8003b94:	40007800 	.word	0x40007800
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a71      	ldr	r2, [pc, #452]	; (8003d64 <UART_SetConfig+0x4b8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d125      	bne.n	8003bee <UART_SetConfig+0x342>
 8003ba2:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <UART_SetConfig+0x4bc>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bb0:	d017      	beq.n	8003be2 <UART_SetConfig+0x336>
 8003bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bb6:	d817      	bhi.n	8003be8 <UART_SetConfig+0x33c>
 8003bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bbc:	d00b      	beq.n	8003bd6 <UART_SetConfig+0x32a>
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d811      	bhi.n	8003be8 <UART_SetConfig+0x33c>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <UART_SetConfig+0x324>
 8003bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bcc:	d006      	beq.n	8003bdc <UART_SetConfig+0x330>
 8003bce:	e00b      	b.n	8003be8 <UART_SetConfig+0x33c>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e00d      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e00a      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e007      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003be2:	2308      	movs	r3, #8
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e004      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003be8:	2310      	movs	r3, #16
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e001      	b.n	8003bf2 <UART_SetConfig+0x346>
 8003bee:	2310      	movs	r3, #16
 8003bf0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfa:	d15b      	bne.n	8003cb4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003bfc:	7ffb      	ldrb	r3, [r7, #31]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d827      	bhi.n	8003c52 <UART_SetConfig+0x3a6>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0x35c>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c2d 	.word	0x08003c2d
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c53 	.word	0x08003c53
 8003c18:	08003c43 	.word	0x08003c43
 8003c1c:	08003c53 	.word	0x08003c53
 8003c20:	08003c53 	.word	0x08003c53
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	08003c4b 	.word	0x08003c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7fe fb06 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003c30:	61b8      	str	r0, [r7, #24]
        break;
 8003c32:	e013      	b.n	8003c5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe fb16 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003c38:	61b8      	str	r0, [r7, #24]
        break;
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <UART_SetConfig+0x4c0>)
 8003c3e:	61bb      	str	r3, [r7, #24]
        break;
 8003c40:	e00c      	b.n	8003c5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7fe fa39 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8003c46:	61b8      	str	r0, [r7, #24]
        break;
 8003c48:	e008      	b.n	8003c5c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	61bb      	str	r3, [r7, #24]
        break;
 8003c50:	e004      	b.n	8003c5c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	77bb      	strb	r3, [r7, #30]
        break;
 8003c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d074      	beq.n	8003d4c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	005a      	lsls	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	d916      	bls.n	8003cae <UART_SetConfig+0x402>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d212      	bcs.n	8003cae <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f023 030f 	bic.w	r3, r3, #15
 8003c90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	89fa      	ldrh	r2, [r7, #14]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e04e      	b.n	8003d4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	77bb      	strb	r3, [r7, #30]
 8003cb2:	e04b      	b.n	8003d4c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d827      	bhi.n	8003d0a <UART_SetConfig+0x45e>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x414>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7fe faaa 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003ce8:	61b8      	str	r0, [r7, #24]
        break;
 8003cea:	e013      	b.n	8003d14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7fe faba 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	61b8      	str	r0, [r7, #24]
        break;
 8003cf2:	e00f      	b.n	8003d14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <UART_SetConfig+0x4c0>)
 8003cf6:	61bb      	str	r3, [r7, #24]
        break;
 8003cf8:	e00c      	b.n	8003d14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe f9dd 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8003cfe:	61b8      	str	r0, [r7, #24]
        break;
 8003d00:	e008      	b.n	8003d14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d06:	61bb      	str	r3, [r7, #24]
        break;
 8003d08:	e004      	b.n	8003d14 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	77bb      	strb	r3, [r7, #30]
        break;
 8003d12:	bf00      	nop
    }

    if (pclk != 0U)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	085a      	lsrs	r2, r3, #1
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	441a      	add	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	d908      	bls.n	8003d48 <UART_SetConfig+0x49c>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d204      	bcs.n	8003d48 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	e001      	b.n	8003d4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d58:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40007c00 	.word	0x40007c00
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	00f42400 	.word	0x00f42400

08003d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d10a      	bne.n	8003e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ec4:	f7fd f862 	bl	8000f8c <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d10e      	bne.n	8003ef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f817 	bl	8003f1a <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e00d      	b.n	8003f12 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2a:	e05e      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d05a      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f34:	f7fd f82a 	bl	8000f8c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d11b      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e043      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d02c      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9e:	d124      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e00f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	429a      	cmp	r2, r3
 8004006:	d091      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004028:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0210 	bic.w	r2, r2, #16
 8004050:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff fbf6 	bl	8003880 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fbd3 	bl	800386c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <__errno>:
 80040d0:	4b01      	ldr	r3, [pc, #4]	; (80040d8 <__errno+0x8>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000054 	.word	0x20000054

080040dc <__libc_init_array>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4d0d      	ldr	r5, [pc, #52]	; (8004114 <__libc_init_array+0x38>)
 80040e0:	4c0d      	ldr	r4, [pc, #52]	; (8004118 <__libc_init_array+0x3c>)
 80040e2:	1b64      	subs	r4, r4, r5
 80040e4:	10a4      	asrs	r4, r4, #2
 80040e6:	2600      	movs	r6, #0
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d109      	bne.n	8004100 <__libc_init_array+0x24>
 80040ec:	4d0b      	ldr	r5, [pc, #44]	; (800411c <__libc_init_array+0x40>)
 80040ee:	4c0c      	ldr	r4, [pc, #48]	; (8004120 <__libc_init_array+0x44>)
 80040f0:	f000 fd0e 	bl	8004b10 <_init>
 80040f4:	1b64      	subs	r4, r4, r5
 80040f6:	10a4      	asrs	r4, r4, #2
 80040f8:	2600      	movs	r6, #0
 80040fa:	42a6      	cmp	r6, r4
 80040fc:	d105      	bne.n	800410a <__libc_init_array+0x2e>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	f855 3b04 	ldr.w	r3, [r5], #4
 8004104:	4798      	blx	r3
 8004106:	3601      	adds	r6, #1
 8004108:	e7ee      	b.n	80040e8 <__libc_init_array+0xc>
 800410a:	f855 3b04 	ldr.w	r3, [r5], #4
 800410e:	4798      	blx	r3
 8004110:	3601      	adds	r6, #1
 8004112:	e7f2      	b.n	80040fa <__libc_init_array+0x1e>
 8004114:	08004bb8 	.word	0x08004bb8
 8004118:	08004bb8 	.word	0x08004bb8
 800411c:	08004bb8 	.word	0x08004bb8
 8004120:	08004bbc 	.word	0x08004bbc

08004124 <memset>:
 8004124:	4402      	add	r2, r0
 8004126:	4603      	mov	r3, r0
 8004128:	4293      	cmp	r3, r2
 800412a:	d100      	bne.n	800412e <memset+0xa>
 800412c:	4770      	bx	lr
 800412e:	f803 1b01 	strb.w	r1, [r3], #1
 8004132:	e7f9      	b.n	8004128 <memset+0x4>

08004134 <_puts_r>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	460e      	mov	r6, r1
 8004138:	4605      	mov	r5, r0
 800413a:	b118      	cbz	r0, 8004144 <_puts_r+0x10>
 800413c:	6983      	ldr	r3, [r0, #24]
 800413e:	b90b      	cbnz	r3, 8004144 <_puts_r+0x10>
 8004140:	f000 fa48 	bl	80045d4 <__sinit>
 8004144:	69ab      	ldr	r3, [r5, #24]
 8004146:	68ac      	ldr	r4, [r5, #8]
 8004148:	b913      	cbnz	r3, 8004150 <_puts_r+0x1c>
 800414a:	4628      	mov	r0, r5
 800414c:	f000 fa42 	bl	80045d4 <__sinit>
 8004150:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <_puts_r+0xd0>)
 8004152:	429c      	cmp	r4, r3
 8004154:	d120      	bne.n	8004198 <_puts_r+0x64>
 8004156:	686c      	ldr	r4, [r5, #4]
 8004158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800415a:	07db      	lsls	r3, r3, #31
 800415c:	d405      	bmi.n	800416a <_puts_r+0x36>
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	0598      	lsls	r0, r3, #22
 8004162:	d402      	bmi.n	800416a <_puts_r+0x36>
 8004164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004166:	f000 fad3 	bl	8004710 <__retarget_lock_acquire_recursive>
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	0719      	lsls	r1, r3, #28
 800416e:	d51d      	bpl.n	80041ac <_puts_r+0x78>
 8004170:	6923      	ldr	r3, [r4, #16]
 8004172:	b1db      	cbz	r3, 80041ac <_puts_r+0x78>
 8004174:	3e01      	subs	r6, #1
 8004176:	68a3      	ldr	r3, [r4, #8]
 8004178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800417c:	3b01      	subs	r3, #1
 800417e:	60a3      	str	r3, [r4, #8]
 8004180:	bb39      	cbnz	r1, 80041d2 <_puts_r+0x9e>
 8004182:	2b00      	cmp	r3, #0
 8004184:	da38      	bge.n	80041f8 <_puts_r+0xc4>
 8004186:	4622      	mov	r2, r4
 8004188:	210a      	movs	r1, #10
 800418a:	4628      	mov	r0, r5
 800418c:	f000 f848 	bl	8004220 <__swbuf_r>
 8004190:	3001      	adds	r0, #1
 8004192:	d011      	beq.n	80041b8 <_puts_r+0x84>
 8004194:	250a      	movs	r5, #10
 8004196:	e011      	b.n	80041bc <_puts_r+0x88>
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <_puts_r+0xd4>)
 800419a:	429c      	cmp	r4, r3
 800419c:	d101      	bne.n	80041a2 <_puts_r+0x6e>
 800419e:	68ac      	ldr	r4, [r5, #8]
 80041a0:	e7da      	b.n	8004158 <_puts_r+0x24>
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <_puts_r+0xd8>)
 80041a4:	429c      	cmp	r4, r3
 80041a6:	bf08      	it	eq
 80041a8:	68ec      	ldreq	r4, [r5, #12]
 80041aa:	e7d5      	b.n	8004158 <_puts_r+0x24>
 80041ac:	4621      	mov	r1, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f888 	bl	80042c4 <__swsetup_r>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d0dd      	beq.n	8004174 <_puts_r+0x40>
 80041b8:	f04f 35ff 	mov.w	r5, #4294967295
 80041bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041be:	07da      	lsls	r2, r3, #31
 80041c0:	d405      	bmi.n	80041ce <_puts_r+0x9a>
 80041c2:	89a3      	ldrh	r3, [r4, #12]
 80041c4:	059b      	lsls	r3, r3, #22
 80041c6:	d402      	bmi.n	80041ce <_puts_r+0x9a>
 80041c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ca:	f000 faa2 	bl	8004712 <__retarget_lock_release_recursive>
 80041ce:	4628      	mov	r0, r5
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da04      	bge.n	80041e0 <_puts_r+0xac>
 80041d6:	69a2      	ldr	r2, [r4, #24]
 80041d8:	429a      	cmp	r2, r3
 80041da:	dc06      	bgt.n	80041ea <_puts_r+0xb6>
 80041dc:	290a      	cmp	r1, #10
 80041de:	d004      	beq.n	80041ea <_puts_r+0xb6>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	6022      	str	r2, [r4, #0]
 80041e6:	7019      	strb	r1, [r3, #0]
 80041e8:	e7c5      	b.n	8004176 <_puts_r+0x42>
 80041ea:	4622      	mov	r2, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 f817 	bl	8004220 <__swbuf_r>
 80041f2:	3001      	adds	r0, #1
 80041f4:	d1bf      	bne.n	8004176 <_puts_r+0x42>
 80041f6:	e7df      	b.n	80041b8 <_puts_r+0x84>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	250a      	movs	r5, #10
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	6022      	str	r2, [r4, #0]
 8004200:	701d      	strb	r5, [r3, #0]
 8004202:	e7db      	b.n	80041bc <_puts_r+0x88>
 8004204:	08004b70 	.word	0x08004b70
 8004208:	08004b90 	.word	0x08004b90
 800420c:	08004b50 	.word	0x08004b50

08004210 <puts>:
 8004210:	4b02      	ldr	r3, [pc, #8]	; (800421c <puts+0xc>)
 8004212:	4601      	mov	r1, r0
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	f7ff bf8d 	b.w	8004134 <_puts_r>
 800421a:	bf00      	nop
 800421c:	20000054 	.word	0x20000054

08004220 <__swbuf_r>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	460e      	mov	r6, r1
 8004224:	4614      	mov	r4, r2
 8004226:	4605      	mov	r5, r0
 8004228:	b118      	cbz	r0, 8004232 <__swbuf_r+0x12>
 800422a:	6983      	ldr	r3, [r0, #24]
 800422c:	b90b      	cbnz	r3, 8004232 <__swbuf_r+0x12>
 800422e:	f000 f9d1 	bl	80045d4 <__sinit>
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <__swbuf_r+0x98>)
 8004234:	429c      	cmp	r4, r3
 8004236:	d12b      	bne.n	8004290 <__swbuf_r+0x70>
 8004238:	686c      	ldr	r4, [r5, #4]
 800423a:	69a3      	ldr	r3, [r4, #24]
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	89a3      	ldrh	r3, [r4, #12]
 8004240:	071a      	lsls	r2, r3, #28
 8004242:	d52f      	bpl.n	80042a4 <__swbuf_r+0x84>
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	b36b      	cbz	r3, 80042a4 <__swbuf_r+0x84>
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1ac0      	subs	r0, r0, r3
 800424e:	6963      	ldr	r3, [r4, #20]
 8004250:	b2f6      	uxtb	r6, r6
 8004252:	4283      	cmp	r3, r0
 8004254:	4637      	mov	r7, r6
 8004256:	dc04      	bgt.n	8004262 <__swbuf_r+0x42>
 8004258:	4621      	mov	r1, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f926 	bl	80044ac <_fflush_r>
 8004260:	bb30      	cbnz	r0, 80042b0 <__swbuf_r+0x90>
 8004262:	68a3      	ldr	r3, [r4, #8]
 8004264:	3b01      	subs	r3, #1
 8004266:	60a3      	str	r3, [r4, #8]
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	6022      	str	r2, [r4, #0]
 800426e:	701e      	strb	r6, [r3, #0]
 8004270:	6963      	ldr	r3, [r4, #20]
 8004272:	3001      	adds	r0, #1
 8004274:	4283      	cmp	r3, r0
 8004276:	d004      	beq.n	8004282 <__swbuf_r+0x62>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	07db      	lsls	r3, r3, #31
 800427c:	d506      	bpl.n	800428c <__swbuf_r+0x6c>
 800427e:	2e0a      	cmp	r6, #10
 8004280:	d104      	bne.n	800428c <__swbuf_r+0x6c>
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 f911 	bl	80044ac <_fflush_r>
 800428a:	b988      	cbnz	r0, 80042b0 <__swbuf_r+0x90>
 800428c:	4638      	mov	r0, r7
 800428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <__swbuf_r+0x9c>)
 8004292:	429c      	cmp	r4, r3
 8004294:	d101      	bne.n	800429a <__swbuf_r+0x7a>
 8004296:	68ac      	ldr	r4, [r5, #8]
 8004298:	e7cf      	b.n	800423a <__swbuf_r+0x1a>
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <__swbuf_r+0xa0>)
 800429c:	429c      	cmp	r4, r3
 800429e:	bf08      	it	eq
 80042a0:	68ec      	ldreq	r4, [r5, #12]
 80042a2:	e7ca      	b.n	800423a <__swbuf_r+0x1a>
 80042a4:	4621      	mov	r1, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f80c 	bl	80042c4 <__swsetup_r>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d0cb      	beq.n	8004248 <__swbuf_r+0x28>
 80042b0:	f04f 37ff 	mov.w	r7, #4294967295
 80042b4:	e7ea      	b.n	800428c <__swbuf_r+0x6c>
 80042b6:	bf00      	nop
 80042b8:	08004b70 	.word	0x08004b70
 80042bc:	08004b90 	.word	0x08004b90
 80042c0:	08004b50 	.word	0x08004b50

080042c4 <__swsetup_r>:
 80042c4:	4b32      	ldr	r3, [pc, #200]	; (8004390 <__swsetup_r+0xcc>)
 80042c6:	b570      	push	{r4, r5, r6, lr}
 80042c8:	681d      	ldr	r5, [r3, #0]
 80042ca:	4606      	mov	r6, r0
 80042cc:	460c      	mov	r4, r1
 80042ce:	b125      	cbz	r5, 80042da <__swsetup_r+0x16>
 80042d0:	69ab      	ldr	r3, [r5, #24]
 80042d2:	b913      	cbnz	r3, 80042da <__swsetup_r+0x16>
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 f97d 	bl	80045d4 <__sinit>
 80042da:	4b2e      	ldr	r3, [pc, #184]	; (8004394 <__swsetup_r+0xd0>)
 80042dc:	429c      	cmp	r4, r3
 80042de:	d10f      	bne.n	8004300 <__swsetup_r+0x3c>
 80042e0:	686c      	ldr	r4, [r5, #4]
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042e8:	0719      	lsls	r1, r3, #28
 80042ea:	d42c      	bmi.n	8004346 <__swsetup_r+0x82>
 80042ec:	06dd      	lsls	r5, r3, #27
 80042ee:	d411      	bmi.n	8004314 <__swsetup_r+0x50>
 80042f0:	2309      	movs	r3, #9
 80042f2:	6033      	str	r3, [r6, #0]
 80042f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	f04f 30ff 	mov.w	r0, #4294967295
 80042fe:	e03e      	b.n	800437e <__swsetup_r+0xba>
 8004300:	4b25      	ldr	r3, [pc, #148]	; (8004398 <__swsetup_r+0xd4>)
 8004302:	429c      	cmp	r4, r3
 8004304:	d101      	bne.n	800430a <__swsetup_r+0x46>
 8004306:	68ac      	ldr	r4, [r5, #8]
 8004308:	e7eb      	b.n	80042e2 <__swsetup_r+0x1e>
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <__swsetup_r+0xd8>)
 800430c:	429c      	cmp	r4, r3
 800430e:	bf08      	it	eq
 8004310:	68ec      	ldreq	r4, [r5, #12]
 8004312:	e7e6      	b.n	80042e2 <__swsetup_r+0x1e>
 8004314:	0758      	lsls	r0, r3, #29
 8004316:	d512      	bpl.n	800433e <__swsetup_r+0x7a>
 8004318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800431a:	b141      	cbz	r1, 800432e <__swsetup_r+0x6a>
 800431c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004320:	4299      	cmp	r1, r3
 8004322:	d002      	beq.n	800432a <__swsetup_r+0x66>
 8004324:	4630      	mov	r0, r6
 8004326:	f000 fa59 	bl	80047dc <_free_r>
 800432a:	2300      	movs	r3, #0
 800432c:	6363      	str	r3, [r4, #52]	; 0x34
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	2300      	movs	r3, #0
 8004338:	6063      	str	r3, [r4, #4]
 800433a:	6923      	ldr	r3, [r4, #16]
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	f043 0308 	orr.w	r3, r3, #8
 8004344:	81a3      	strh	r3, [r4, #12]
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	b94b      	cbnz	r3, 800435e <__swsetup_r+0x9a>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004354:	d003      	beq.n	800435e <__swsetup_r+0x9a>
 8004356:	4621      	mov	r1, r4
 8004358:	4630      	mov	r0, r6
 800435a:	f000 f9ff 	bl	800475c <__smakebuf_r>
 800435e:	89a0      	ldrh	r0, [r4, #12]
 8004360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004364:	f010 0301 	ands.w	r3, r0, #1
 8004368:	d00a      	beq.n	8004380 <__swsetup_r+0xbc>
 800436a:	2300      	movs	r3, #0
 800436c:	60a3      	str	r3, [r4, #8]
 800436e:	6963      	ldr	r3, [r4, #20]
 8004370:	425b      	negs	r3, r3
 8004372:	61a3      	str	r3, [r4, #24]
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	b943      	cbnz	r3, 800438a <__swsetup_r+0xc6>
 8004378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800437c:	d1ba      	bne.n	80042f4 <__swsetup_r+0x30>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	0781      	lsls	r1, r0, #30
 8004382:	bf58      	it	pl
 8004384:	6963      	ldrpl	r3, [r4, #20]
 8004386:	60a3      	str	r3, [r4, #8]
 8004388:	e7f4      	b.n	8004374 <__swsetup_r+0xb0>
 800438a:	2000      	movs	r0, #0
 800438c:	e7f7      	b.n	800437e <__swsetup_r+0xba>
 800438e:	bf00      	nop
 8004390:	20000054 	.word	0x20000054
 8004394:	08004b70 	.word	0x08004b70
 8004398:	08004b90 	.word	0x08004b90
 800439c:	08004b50 	.word	0x08004b50

080043a0 <__sflush_r>:
 80043a0:	898a      	ldrh	r2, [r1, #12]
 80043a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	0710      	lsls	r0, r2, #28
 80043aa:	460c      	mov	r4, r1
 80043ac:	d458      	bmi.n	8004460 <__sflush_r+0xc0>
 80043ae:	684b      	ldr	r3, [r1, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	dc05      	bgt.n	80043c0 <__sflush_r+0x20>
 80043b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dc02      	bgt.n	80043c0 <__sflush_r+0x20>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043c2:	2e00      	cmp	r6, #0
 80043c4:	d0f9      	beq.n	80043ba <__sflush_r+0x1a>
 80043c6:	2300      	movs	r3, #0
 80043c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043cc:	682f      	ldr	r7, [r5, #0]
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	d032      	beq.n	8004438 <__sflush_r+0x98>
 80043d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	075a      	lsls	r2, r3, #29
 80043d8:	d505      	bpl.n	80043e6 <__sflush_r+0x46>
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	1ac0      	subs	r0, r0, r3
 80043de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043e0:	b10b      	cbz	r3, 80043e6 <__sflush_r+0x46>
 80043e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043e4:	1ac0      	subs	r0, r0, r3
 80043e6:	2300      	movs	r3, #0
 80043e8:	4602      	mov	r2, r0
 80043ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ec:	6a21      	ldr	r1, [r4, #32]
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b0      	blx	r6
 80043f2:	1c43      	adds	r3, r0, #1
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	d106      	bne.n	8004406 <__sflush_r+0x66>
 80043f8:	6829      	ldr	r1, [r5, #0]
 80043fa:	291d      	cmp	r1, #29
 80043fc:	d82c      	bhi.n	8004458 <__sflush_r+0xb8>
 80043fe:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <__sflush_r+0x108>)
 8004400:	40ca      	lsrs	r2, r1
 8004402:	07d6      	lsls	r6, r2, #31
 8004404:	d528      	bpl.n	8004458 <__sflush_r+0xb8>
 8004406:	2200      	movs	r2, #0
 8004408:	6062      	str	r2, [r4, #4]
 800440a:	04d9      	lsls	r1, r3, #19
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	6022      	str	r2, [r4, #0]
 8004410:	d504      	bpl.n	800441c <__sflush_r+0x7c>
 8004412:	1c42      	adds	r2, r0, #1
 8004414:	d101      	bne.n	800441a <__sflush_r+0x7a>
 8004416:	682b      	ldr	r3, [r5, #0]
 8004418:	b903      	cbnz	r3, 800441c <__sflush_r+0x7c>
 800441a:	6560      	str	r0, [r4, #84]	; 0x54
 800441c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800441e:	602f      	str	r7, [r5, #0]
 8004420:	2900      	cmp	r1, #0
 8004422:	d0ca      	beq.n	80043ba <__sflush_r+0x1a>
 8004424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004428:	4299      	cmp	r1, r3
 800442a:	d002      	beq.n	8004432 <__sflush_r+0x92>
 800442c:	4628      	mov	r0, r5
 800442e:	f000 f9d5 	bl	80047dc <_free_r>
 8004432:	2000      	movs	r0, #0
 8004434:	6360      	str	r0, [r4, #52]	; 0x34
 8004436:	e7c1      	b.n	80043bc <__sflush_r+0x1c>
 8004438:	6a21      	ldr	r1, [r4, #32]
 800443a:	2301      	movs	r3, #1
 800443c:	4628      	mov	r0, r5
 800443e:	47b0      	blx	r6
 8004440:	1c41      	adds	r1, r0, #1
 8004442:	d1c7      	bne.n	80043d4 <__sflush_r+0x34>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0c4      	beq.n	80043d4 <__sflush_r+0x34>
 800444a:	2b1d      	cmp	r3, #29
 800444c:	d001      	beq.n	8004452 <__sflush_r+0xb2>
 800444e:	2b16      	cmp	r3, #22
 8004450:	d101      	bne.n	8004456 <__sflush_r+0xb6>
 8004452:	602f      	str	r7, [r5, #0]
 8004454:	e7b1      	b.n	80043ba <__sflush_r+0x1a>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	e7ad      	b.n	80043bc <__sflush_r+0x1c>
 8004460:	690f      	ldr	r7, [r1, #16]
 8004462:	2f00      	cmp	r7, #0
 8004464:	d0a9      	beq.n	80043ba <__sflush_r+0x1a>
 8004466:	0793      	lsls	r3, r2, #30
 8004468:	680e      	ldr	r6, [r1, #0]
 800446a:	bf08      	it	eq
 800446c:	694b      	ldreq	r3, [r1, #20]
 800446e:	600f      	str	r7, [r1, #0]
 8004470:	bf18      	it	ne
 8004472:	2300      	movne	r3, #0
 8004474:	eba6 0807 	sub.w	r8, r6, r7
 8004478:	608b      	str	r3, [r1, #8]
 800447a:	f1b8 0f00 	cmp.w	r8, #0
 800447e:	dd9c      	ble.n	80043ba <__sflush_r+0x1a>
 8004480:	6a21      	ldr	r1, [r4, #32]
 8004482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004484:	4643      	mov	r3, r8
 8004486:	463a      	mov	r2, r7
 8004488:	4628      	mov	r0, r5
 800448a:	47b0      	blx	r6
 800448c:	2800      	cmp	r0, #0
 800448e:	dc06      	bgt.n	800449e <__sflush_r+0xfe>
 8004490:	89a3      	ldrh	r3, [r4, #12]
 8004492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e78e      	b.n	80043bc <__sflush_r+0x1c>
 800449e:	4407      	add	r7, r0
 80044a0:	eba8 0800 	sub.w	r8, r8, r0
 80044a4:	e7e9      	b.n	800447a <__sflush_r+0xda>
 80044a6:	bf00      	nop
 80044a8:	20400001 	.word	0x20400001

080044ac <_fflush_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	4605      	mov	r5, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	b913      	cbnz	r3, 80044bc <_fflush_r+0x10>
 80044b6:	2500      	movs	r5, #0
 80044b8:	4628      	mov	r0, r5
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	b118      	cbz	r0, 80044c6 <_fflush_r+0x1a>
 80044be:	6983      	ldr	r3, [r0, #24]
 80044c0:	b90b      	cbnz	r3, 80044c6 <_fflush_r+0x1a>
 80044c2:	f000 f887 	bl	80045d4 <__sinit>
 80044c6:	4b14      	ldr	r3, [pc, #80]	; (8004518 <_fflush_r+0x6c>)
 80044c8:	429c      	cmp	r4, r3
 80044ca:	d11b      	bne.n	8004504 <_fflush_r+0x58>
 80044cc:	686c      	ldr	r4, [r5, #4]
 80044ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0ef      	beq.n	80044b6 <_fflush_r+0xa>
 80044d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044d8:	07d0      	lsls	r0, r2, #31
 80044da:	d404      	bmi.n	80044e6 <_fflush_r+0x3a>
 80044dc:	0599      	lsls	r1, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_fflush_r+0x3a>
 80044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e2:	f000 f915 	bl	8004710 <__retarget_lock_acquire_recursive>
 80044e6:	4628      	mov	r0, r5
 80044e8:	4621      	mov	r1, r4
 80044ea:	f7ff ff59 	bl	80043a0 <__sflush_r>
 80044ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044f0:	07da      	lsls	r2, r3, #31
 80044f2:	4605      	mov	r5, r0
 80044f4:	d4e0      	bmi.n	80044b8 <_fflush_r+0xc>
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	059b      	lsls	r3, r3, #22
 80044fa:	d4dd      	bmi.n	80044b8 <_fflush_r+0xc>
 80044fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044fe:	f000 f908 	bl	8004712 <__retarget_lock_release_recursive>
 8004502:	e7d9      	b.n	80044b8 <_fflush_r+0xc>
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <_fflush_r+0x70>)
 8004506:	429c      	cmp	r4, r3
 8004508:	d101      	bne.n	800450e <_fflush_r+0x62>
 800450a:	68ac      	ldr	r4, [r5, #8]
 800450c:	e7df      	b.n	80044ce <_fflush_r+0x22>
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <_fflush_r+0x74>)
 8004510:	429c      	cmp	r4, r3
 8004512:	bf08      	it	eq
 8004514:	68ec      	ldreq	r4, [r5, #12]
 8004516:	e7da      	b.n	80044ce <_fflush_r+0x22>
 8004518:	08004b70 	.word	0x08004b70
 800451c:	08004b90 	.word	0x08004b90
 8004520:	08004b50 	.word	0x08004b50

08004524 <std>:
 8004524:	2300      	movs	r3, #0
 8004526:	b510      	push	{r4, lr}
 8004528:	4604      	mov	r4, r0
 800452a:	e9c0 3300 	strd	r3, r3, [r0]
 800452e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004532:	6083      	str	r3, [r0, #8]
 8004534:	8181      	strh	r1, [r0, #12]
 8004536:	6643      	str	r3, [r0, #100]	; 0x64
 8004538:	81c2      	strh	r2, [r0, #14]
 800453a:	6183      	str	r3, [r0, #24]
 800453c:	4619      	mov	r1, r3
 800453e:	2208      	movs	r2, #8
 8004540:	305c      	adds	r0, #92	; 0x5c
 8004542:	f7ff fdef 	bl	8004124 <memset>
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <std+0x38>)
 8004548:	6263      	str	r3, [r4, #36]	; 0x24
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <std+0x3c>)
 800454c:	62a3      	str	r3, [r4, #40]	; 0x28
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <std+0x40>)
 8004550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <std+0x44>)
 8004554:	6224      	str	r4, [r4, #32]
 8004556:	6323      	str	r3, [r4, #48]	; 0x30
 8004558:	bd10      	pop	{r4, pc}
 800455a:	bf00      	nop
 800455c:	08004951 	.word	0x08004951
 8004560:	08004973 	.word	0x08004973
 8004564:	080049ab 	.word	0x080049ab
 8004568:	080049cf 	.word	0x080049cf

0800456c <_cleanup_r>:
 800456c:	4901      	ldr	r1, [pc, #4]	; (8004574 <_cleanup_r+0x8>)
 800456e:	f000 b8af 	b.w	80046d0 <_fwalk_reent>
 8004572:	bf00      	nop
 8004574:	080044ad 	.word	0x080044ad

08004578 <__sfmoreglue>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	1e4a      	subs	r2, r1, #1
 800457c:	2568      	movs	r5, #104	; 0x68
 800457e:	4355      	muls	r5, r2
 8004580:	460e      	mov	r6, r1
 8004582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004586:	f000 f979 	bl	800487c <_malloc_r>
 800458a:	4604      	mov	r4, r0
 800458c:	b140      	cbz	r0, 80045a0 <__sfmoreglue+0x28>
 800458e:	2100      	movs	r1, #0
 8004590:	e9c0 1600 	strd	r1, r6, [r0]
 8004594:	300c      	adds	r0, #12
 8004596:	60a0      	str	r0, [r4, #8]
 8004598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800459c:	f7ff fdc2 	bl	8004124 <memset>
 80045a0:	4620      	mov	r0, r4
 80045a2:	bd70      	pop	{r4, r5, r6, pc}

080045a4 <__sfp_lock_acquire>:
 80045a4:	4801      	ldr	r0, [pc, #4]	; (80045ac <__sfp_lock_acquire+0x8>)
 80045a6:	f000 b8b3 	b.w	8004710 <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	2000020c 	.word	0x2000020c

080045b0 <__sfp_lock_release>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__sfp_lock_release+0x8>)
 80045b2:	f000 b8ae 	b.w	8004712 <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	2000020c 	.word	0x2000020c

080045bc <__sinit_lock_acquire>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__sinit_lock_acquire+0x8>)
 80045be:	f000 b8a7 	b.w	8004710 <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	20000207 	.word	0x20000207

080045c8 <__sinit_lock_release>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__sinit_lock_release+0x8>)
 80045ca:	f000 b8a2 	b.w	8004712 <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	20000207 	.word	0x20000207

080045d4 <__sinit>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
 80045d8:	f7ff fff0 	bl	80045bc <__sinit_lock_acquire>
 80045dc:	69a3      	ldr	r3, [r4, #24]
 80045de:	b11b      	cbz	r3, 80045e8 <__sinit+0x14>
 80045e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e4:	f7ff bff0 	b.w	80045c8 <__sinit_lock_release>
 80045e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045ec:	6523      	str	r3, [r4, #80]	; 0x50
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <__sinit+0x68>)
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <__sinit+0x6c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	bf04      	itt	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	61a3      	streq	r3, [r4, #24]
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 f820 	bl	8004644 <__sfp>
 8004604:	6060      	str	r0, [r4, #4]
 8004606:	4620      	mov	r0, r4
 8004608:	f000 f81c 	bl	8004644 <__sfp>
 800460c:	60a0      	str	r0, [r4, #8]
 800460e:	4620      	mov	r0, r4
 8004610:	f000 f818 	bl	8004644 <__sfp>
 8004614:	2200      	movs	r2, #0
 8004616:	60e0      	str	r0, [r4, #12]
 8004618:	2104      	movs	r1, #4
 800461a:	6860      	ldr	r0, [r4, #4]
 800461c:	f7ff ff82 	bl	8004524 <std>
 8004620:	68a0      	ldr	r0, [r4, #8]
 8004622:	2201      	movs	r2, #1
 8004624:	2109      	movs	r1, #9
 8004626:	f7ff ff7d 	bl	8004524 <std>
 800462a:	68e0      	ldr	r0, [r4, #12]
 800462c:	2202      	movs	r2, #2
 800462e:	2112      	movs	r1, #18
 8004630:	f7ff ff78 	bl	8004524 <std>
 8004634:	2301      	movs	r3, #1
 8004636:	61a3      	str	r3, [r4, #24]
 8004638:	e7d2      	b.n	80045e0 <__sinit+0xc>
 800463a:	bf00      	nop
 800463c:	08004b4c 	.word	0x08004b4c
 8004640:	0800456d 	.word	0x0800456d

08004644 <__sfp>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	4607      	mov	r7, r0
 8004648:	f7ff ffac 	bl	80045a4 <__sfp_lock_acquire>
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <__sfp+0x84>)
 800464e:	681e      	ldr	r6, [r3, #0]
 8004650:	69b3      	ldr	r3, [r6, #24]
 8004652:	b913      	cbnz	r3, 800465a <__sfp+0x16>
 8004654:	4630      	mov	r0, r6
 8004656:	f7ff ffbd 	bl	80045d4 <__sinit>
 800465a:	3648      	adds	r6, #72	; 0x48
 800465c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004660:	3b01      	subs	r3, #1
 8004662:	d503      	bpl.n	800466c <__sfp+0x28>
 8004664:	6833      	ldr	r3, [r6, #0]
 8004666:	b30b      	cbz	r3, 80046ac <__sfp+0x68>
 8004668:	6836      	ldr	r6, [r6, #0]
 800466a:	e7f7      	b.n	800465c <__sfp+0x18>
 800466c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004670:	b9d5      	cbnz	r5, 80046a8 <__sfp+0x64>
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <__sfp+0x88>)
 8004674:	60e3      	str	r3, [r4, #12]
 8004676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800467a:	6665      	str	r5, [r4, #100]	; 0x64
 800467c:	f000 f847 	bl	800470e <__retarget_lock_init_recursive>
 8004680:	f7ff ff96 	bl	80045b0 <__sfp_lock_release>
 8004684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800468c:	6025      	str	r5, [r4, #0]
 800468e:	61a5      	str	r5, [r4, #24]
 8004690:	2208      	movs	r2, #8
 8004692:	4629      	mov	r1, r5
 8004694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004698:	f7ff fd44 	bl	8004124 <memset>
 800469c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046a4:	4620      	mov	r0, r4
 80046a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046a8:	3468      	adds	r4, #104	; 0x68
 80046aa:	e7d9      	b.n	8004660 <__sfp+0x1c>
 80046ac:	2104      	movs	r1, #4
 80046ae:	4638      	mov	r0, r7
 80046b0:	f7ff ff62 	bl	8004578 <__sfmoreglue>
 80046b4:	4604      	mov	r4, r0
 80046b6:	6030      	str	r0, [r6, #0]
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d1d5      	bne.n	8004668 <__sfp+0x24>
 80046bc:	f7ff ff78 	bl	80045b0 <__sfp_lock_release>
 80046c0:	230c      	movs	r3, #12
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	e7ee      	b.n	80046a4 <__sfp+0x60>
 80046c6:	bf00      	nop
 80046c8:	08004b4c 	.word	0x08004b4c
 80046cc:	ffff0001 	.word	0xffff0001

080046d0 <_fwalk_reent>:
 80046d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d4:	4606      	mov	r6, r0
 80046d6:	4688      	mov	r8, r1
 80046d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046dc:	2700      	movs	r7, #0
 80046de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046e2:	f1b9 0901 	subs.w	r9, r9, #1
 80046e6:	d505      	bpl.n	80046f4 <_fwalk_reent+0x24>
 80046e8:	6824      	ldr	r4, [r4, #0]
 80046ea:	2c00      	cmp	r4, #0
 80046ec:	d1f7      	bne.n	80046de <_fwalk_reent+0xe>
 80046ee:	4638      	mov	r0, r7
 80046f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f4:	89ab      	ldrh	r3, [r5, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d907      	bls.n	800470a <_fwalk_reent+0x3a>
 80046fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046fe:	3301      	adds	r3, #1
 8004700:	d003      	beq.n	800470a <_fwalk_reent+0x3a>
 8004702:	4629      	mov	r1, r5
 8004704:	4630      	mov	r0, r6
 8004706:	47c0      	blx	r8
 8004708:	4307      	orrs	r7, r0
 800470a:	3568      	adds	r5, #104	; 0x68
 800470c:	e7e9      	b.n	80046e2 <_fwalk_reent+0x12>

0800470e <__retarget_lock_init_recursive>:
 800470e:	4770      	bx	lr

08004710 <__retarget_lock_acquire_recursive>:
 8004710:	4770      	bx	lr

08004712 <__retarget_lock_release_recursive>:
 8004712:	4770      	bx	lr

08004714 <__swhatbuf_r>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	460e      	mov	r6, r1
 8004718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471c:	2900      	cmp	r1, #0
 800471e:	b096      	sub	sp, #88	; 0x58
 8004720:	4614      	mov	r4, r2
 8004722:	461d      	mov	r5, r3
 8004724:	da07      	bge.n	8004736 <__swhatbuf_r+0x22>
 8004726:	2300      	movs	r3, #0
 8004728:	602b      	str	r3, [r5, #0]
 800472a:	89b3      	ldrh	r3, [r6, #12]
 800472c:	061a      	lsls	r2, r3, #24
 800472e:	d410      	bmi.n	8004752 <__swhatbuf_r+0x3e>
 8004730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004734:	e00e      	b.n	8004754 <__swhatbuf_r+0x40>
 8004736:	466a      	mov	r2, sp
 8004738:	f000 f970 	bl	8004a1c <_fstat_r>
 800473c:	2800      	cmp	r0, #0
 800473e:	dbf2      	blt.n	8004726 <__swhatbuf_r+0x12>
 8004740:	9a01      	ldr	r2, [sp, #4]
 8004742:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004746:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800474a:	425a      	negs	r2, r3
 800474c:	415a      	adcs	r2, r3
 800474e:	602a      	str	r2, [r5, #0]
 8004750:	e7ee      	b.n	8004730 <__swhatbuf_r+0x1c>
 8004752:	2340      	movs	r3, #64	; 0x40
 8004754:	2000      	movs	r0, #0
 8004756:	6023      	str	r3, [r4, #0]
 8004758:	b016      	add	sp, #88	; 0x58
 800475a:	bd70      	pop	{r4, r5, r6, pc}

0800475c <__smakebuf_r>:
 800475c:	898b      	ldrh	r3, [r1, #12]
 800475e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004760:	079d      	lsls	r5, r3, #30
 8004762:	4606      	mov	r6, r0
 8004764:	460c      	mov	r4, r1
 8004766:	d507      	bpl.n	8004778 <__smakebuf_r+0x1c>
 8004768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	6123      	str	r3, [r4, #16]
 8004770:	2301      	movs	r3, #1
 8004772:	6163      	str	r3, [r4, #20]
 8004774:	b002      	add	sp, #8
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	ab01      	add	r3, sp, #4
 800477a:	466a      	mov	r2, sp
 800477c:	f7ff ffca 	bl	8004714 <__swhatbuf_r>
 8004780:	9900      	ldr	r1, [sp, #0]
 8004782:	4605      	mov	r5, r0
 8004784:	4630      	mov	r0, r6
 8004786:	f000 f879 	bl	800487c <_malloc_r>
 800478a:	b948      	cbnz	r0, 80047a0 <__smakebuf_r+0x44>
 800478c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004790:	059a      	lsls	r2, r3, #22
 8004792:	d4ef      	bmi.n	8004774 <__smakebuf_r+0x18>
 8004794:	f023 0303 	bic.w	r3, r3, #3
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	e7e3      	b.n	8004768 <__smakebuf_r+0xc>
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <__smakebuf_r+0x7c>)
 80047a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	6020      	str	r0, [r4, #0]
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	81a3      	strh	r3, [r4, #12]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6163      	str	r3, [r4, #20]
 80047b2:	9b01      	ldr	r3, [sp, #4]
 80047b4:	6120      	str	r0, [r4, #16]
 80047b6:	b15b      	cbz	r3, 80047d0 <__smakebuf_r+0x74>
 80047b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047bc:	4630      	mov	r0, r6
 80047be:	f000 f93f 	bl	8004a40 <_isatty_r>
 80047c2:	b128      	cbz	r0, 80047d0 <__smakebuf_r+0x74>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	81a3      	strh	r3, [r4, #12]
 80047d0:	89a0      	ldrh	r0, [r4, #12]
 80047d2:	4305      	orrs	r5, r0
 80047d4:	81a5      	strh	r5, [r4, #12]
 80047d6:	e7cd      	b.n	8004774 <__smakebuf_r+0x18>
 80047d8:	0800456d 	.word	0x0800456d

080047dc <_free_r>:
 80047dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047de:	2900      	cmp	r1, #0
 80047e0:	d048      	beq.n	8004874 <_free_r+0x98>
 80047e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e6:	9001      	str	r0, [sp, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f1a1 0404 	sub.w	r4, r1, #4
 80047ee:	bfb8      	it	lt
 80047f0:	18e4      	addlt	r4, r4, r3
 80047f2:	f000 f947 	bl	8004a84 <__malloc_lock>
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <_free_r+0x9c>)
 80047f8:	9801      	ldr	r0, [sp, #4]
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	4615      	mov	r5, r2
 80047fe:	b933      	cbnz	r3, 800480e <_free_r+0x32>
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6014      	str	r4, [r2, #0]
 8004804:	b003      	add	sp, #12
 8004806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800480a:	f000 b941 	b.w	8004a90 <__malloc_unlock>
 800480e:	42a3      	cmp	r3, r4
 8004810:	d90b      	bls.n	800482a <_free_r+0x4e>
 8004812:	6821      	ldr	r1, [r4, #0]
 8004814:	1862      	adds	r2, r4, r1
 8004816:	4293      	cmp	r3, r2
 8004818:	bf04      	itt	eq
 800481a:	681a      	ldreq	r2, [r3, #0]
 800481c:	685b      	ldreq	r3, [r3, #4]
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	bf04      	itt	eq
 8004822:	1852      	addeq	r2, r2, r1
 8004824:	6022      	streq	r2, [r4, #0]
 8004826:	602c      	str	r4, [r5, #0]
 8004828:	e7ec      	b.n	8004804 <_free_r+0x28>
 800482a:	461a      	mov	r2, r3
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	b10b      	cbz	r3, 8004834 <_free_r+0x58>
 8004830:	42a3      	cmp	r3, r4
 8004832:	d9fa      	bls.n	800482a <_free_r+0x4e>
 8004834:	6811      	ldr	r1, [r2, #0]
 8004836:	1855      	adds	r5, r2, r1
 8004838:	42a5      	cmp	r5, r4
 800483a:	d10b      	bne.n	8004854 <_free_r+0x78>
 800483c:	6824      	ldr	r4, [r4, #0]
 800483e:	4421      	add	r1, r4
 8004840:	1854      	adds	r4, r2, r1
 8004842:	42a3      	cmp	r3, r4
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	d1dd      	bne.n	8004804 <_free_r+0x28>
 8004848:	681c      	ldr	r4, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	6053      	str	r3, [r2, #4]
 800484e:	4421      	add	r1, r4
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	e7d7      	b.n	8004804 <_free_r+0x28>
 8004854:	d902      	bls.n	800485c <_free_r+0x80>
 8004856:	230c      	movs	r3, #12
 8004858:	6003      	str	r3, [r0, #0]
 800485a:	e7d3      	b.n	8004804 <_free_r+0x28>
 800485c:	6825      	ldr	r5, [r4, #0]
 800485e:	1961      	adds	r1, r4, r5
 8004860:	428b      	cmp	r3, r1
 8004862:	bf04      	itt	eq
 8004864:	6819      	ldreq	r1, [r3, #0]
 8004866:	685b      	ldreq	r3, [r3, #4]
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	bf04      	itt	eq
 800486c:	1949      	addeq	r1, r1, r5
 800486e:	6021      	streq	r1, [r4, #0]
 8004870:	6054      	str	r4, [r2, #4]
 8004872:	e7c7      	b.n	8004804 <_free_r+0x28>
 8004874:	b003      	add	sp, #12
 8004876:	bd30      	pop	{r4, r5, pc}
 8004878:	200000d8 	.word	0x200000d8

0800487c <_malloc_r>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	1ccd      	adds	r5, r1, #3
 8004880:	f025 0503 	bic.w	r5, r5, #3
 8004884:	3508      	adds	r5, #8
 8004886:	2d0c      	cmp	r5, #12
 8004888:	bf38      	it	cc
 800488a:	250c      	movcc	r5, #12
 800488c:	2d00      	cmp	r5, #0
 800488e:	4606      	mov	r6, r0
 8004890:	db01      	blt.n	8004896 <_malloc_r+0x1a>
 8004892:	42a9      	cmp	r1, r5
 8004894:	d903      	bls.n	800489e <_malloc_r+0x22>
 8004896:	230c      	movs	r3, #12
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	2000      	movs	r0, #0
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489e:	f000 f8f1 	bl	8004a84 <__malloc_lock>
 80048a2:	4921      	ldr	r1, [pc, #132]	; (8004928 <_malloc_r+0xac>)
 80048a4:	680a      	ldr	r2, [r1, #0]
 80048a6:	4614      	mov	r4, r2
 80048a8:	b99c      	cbnz	r4, 80048d2 <_malloc_r+0x56>
 80048aa:	4f20      	ldr	r7, [pc, #128]	; (800492c <_malloc_r+0xb0>)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b923      	cbnz	r3, 80048ba <_malloc_r+0x3e>
 80048b0:	4621      	mov	r1, r4
 80048b2:	4630      	mov	r0, r6
 80048b4:	f000 f83c 	bl	8004930 <_sbrk_r>
 80048b8:	6038      	str	r0, [r7, #0]
 80048ba:	4629      	mov	r1, r5
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 f837 	bl	8004930 <_sbrk_r>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	d123      	bne.n	800490e <_malloc_r+0x92>
 80048c6:	230c      	movs	r3, #12
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 f8e0 	bl	8004a90 <__malloc_unlock>
 80048d0:	e7e3      	b.n	800489a <_malloc_r+0x1e>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	1b5b      	subs	r3, r3, r5
 80048d6:	d417      	bmi.n	8004908 <_malloc_r+0x8c>
 80048d8:	2b0b      	cmp	r3, #11
 80048da:	d903      	bls.n	80048e4 <_malloc_r+0x68>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	441c      	add	r4, r3
 80048e0:	6025      	str	r5, [r4, #0]
 80048e2:	e004      	b.n	80048ee <_malloc_r+0x72>
 80048e4:	6863      	ldr	r3, [r4, #4]
 80048e6:	42a2      	cmp	r2, r4
 80048e8:	bf0c      	ite	eq
 80048ea:	600b      	streq	r3, [r1, #0]
 80048ec:	6053      	strne	r3, [r2, #4]
 80048ee:	4630      	mov	r0, r6
 80048f0:	f000 f8ce 	bl	8004a90 <__malloc_unlock>
 80048f4:	f104 000b 	add.w	r0, r4, #11
 80048f8:	1d23      	adds	r3, r4, #4
 80048fa:	f020 0007 	bic.w	r0, r0, #7
 80048fe:	1ac2      	subs	r2, r0, r3
 8004900:	d0cc      	beq.n	800489c <_malloc_r+0x20>
 8004902:	1a1b      	subs	r3, r3, r0
 8004904:	50a3      	str	r3, [r4, r2]
 8004906:	e7c9      	b.n	800489c <_malloc_r+0x20>
 8004908:	4622      	mov	r2, r4
 800490a:	6864      	ldr	r4, [r4, #4]
 800490c:	e7cc      	b.n	80048a8 <_malloc_r+0x2c>
 800490e:	1cc4      	adds	r4, r0, #3
 8004910:	f024 0403 	bic.w	r4, r4, #3
 8004914:	42a0      	cmp	r0, r4
 8004916:	d0e3      	beq.n	80048e0 <_malloc_r+0x64>
 8004918:	1a21      	subs	r1, r4, r0
 800491a:	4630      	mov	r0, r6
 800491c:	f000 f808 	bl	8004930 <_sbrk_r>
 8004920:	3001      	adds	r0, #1
 8004922:	d1dd      	bne.n	80048e0 <_malloc_r+0x64>
 8004924:	e7cf      	b.n	80048c6 <_malloc_r+0x4a>
 8004926:	bf00      	nop
 8004928:	200000d8 	.word	0x200000d8
 800492c:	200000dc 	.word	0x200000dc

08004930 <_sbrk_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4d06      	ldr	r5, [pc, #24]	; (800494c <_sbrk_r+0x1c>)
 8004934:	2300      	movs	r3, #0
 8004936:	4604      	mov	r4, r0
 8004938:	4608      	mov	r0, r1
 800493a:	602b      	str	r3, [r5, #0]
 800493c:	f7fc fa54 	bl	8000de8 <_sbrk>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_sbrk_r+0x1a>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_sbrk_r+0x1a>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20000210 	.word	0x20000210

08004950 <__sread>:
 8004950:	b510      	push	{r4, lr}
 8004952:	460c      	mov	r4, r1
 8004954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004958:	f000 f8a0 	bl	8004a9c <_read_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	bfab      	itete	ge
 8004960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004962:	89a3      	ldrhlt	r3, [r4, #12]
 8004964:	181b      	addge	r3, r3, r0
 8004966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800496a:	bfac      	ite	ge
 800496c:	6563      	strge	r3, [r4, #84]	; 0x54
 800496e:	81a3      	strhlt	r3, [r4, #12]
 8004970:	bd10      	pop	{r4, pc}

08004972 <__swrite>:
 8004972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004976:	461f      	mov	r7, r3
 8004978:	898b      	ldrh	r3, [r1, #12]
 800497a:	05db      	lsls	r3, r3, #23
 800497c:	4605      	mov	r5, r0
 800497e:	460c      	mov	r4, r1
 8004980:	4616      	mov	r6, r2
 8004982:	d505      	bpl.n	8004990 <__swrite+0x1e>
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	2302      	movs	r3, #2
 800498a:	2200      	movs	r2, #0
 800498c:	f000 f868 	bl	8004a60 <_lseek_r>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	4632      	mov	r2, r6
 800499e:	463b      	mov	r3, r7
 80049a0:	4628      	mov	r0, r5
 80049a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	f000 b817 	b.w	80049d8 <_write_r>

080049aa <__sseek>:
 80049aa:	b510      	push	{r4, lr}
 80049ac:	460c      	mov	r4, r1
 80049ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b2:	f000 f855 	bl	8004a60 <_lseek_r>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	bf15      	itete	ne
 80049bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80049be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049c6:	81a3      	strheq	r3, [r4, #12]
 80049c8:	bf18      	it	ne
 80049ca:	81a3      	strhne	r3, [r4, #12]
 80049cc:	bd10      	pop	{r4, pc}

080049ce <__sclose>:
 80049ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d2:	f000 b813 	b.w	80049fc <_close_r>
	...

080049d8 <_write_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4d07      	ldr	r5, [pc, #28]	; (80049f8 <_write_r+0x20>)
 80049dc:	4604      	mov	r4, r0
 80049de:	4608      	mov	r0, r1
 80049e0:	4611      	mov	r1, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	602a      	str	r2, [r5, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7fb fdfc 	bl	80005e4 <_write>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_write_r+0x1e>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_write_r+0x1e>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20000210 	.word	0x20000210

080049fc <_close_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4d06      	ldr	r5, [pc, #24]	; (8004a18 <_close_r+0x1c>)
 8004a00:	2300      	movs	r3, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	f000 f85a 	bl	8004ac0 <_close>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_close_r+0x1a>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_close_r+0x1a>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	20000210 	.word	0x20000210

08004a1c <_fstat_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d07      	ldr	r5, [pc, #28]	; (8004a3c <_fstat_r+0x20>)
 8004a20:	2300      	movs	r3, #0
 8004a22:	4604      	mov	r4, r0
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	602b      	str	r3, [r5, #0]
 8004a2a:	f000 f851 	bl	8004ad0 <_fstat>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	d102      	bne.n	8004a38 <_fstat_r+0x1c>
 8004a32:	682b      	ldr	r3, [r5, #0]
 8004a34:	b103      	cbz	r3, 8004a38 <_fstat_r+0x1c>
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	bd38      	pop	{r3, r4, r5, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000210 	.word	0x20000210

08004a40 <_isatty_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4d06      	ldr	r5, [pc, #24]	; (8004a5c <_isatty_r+0x1c>)
 8004a44:	2300      	movs	r3, #0
 8004a46:	4604      	mov	r4, r0
 8004a48:	4608      	mov	r0, r1
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	f000 f848 	bl	8004ae0 <_isatty>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d102      	bne.n	8004a5a <_isatty_r+0x1a>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	b103      	cbz	r3, 8004a5a <_isatty_r+0x1a>
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	20000210 	.word	0x20000210

08004a60 <_lseek_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d07      	ldr	r5, [pc, #28]	; (8004a80 <_lseek_r+0x20>)
 8004a64:	4604      	mov	r4, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	4611      	mov	r1, r2
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	602a      	str	r2, [r5, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 f83e 	bl	8004af0 <_lseek>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d102      	bne.n	8004a7e <_lseek_r+0x1e>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	b103      	cbz	r3, 8004a7e <_lseek_r+0x1e>
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	20000210 	.word	0x20000210

08004a84 <__malloc_lock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__malloc_lock+0x8>)
 8004a86:	f7ff be43 	b.w	8004710 <__retarget_lock_acquire_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	20000208 	.word	0x20000208

08004a90 <__malloc_unlock>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__malloc_unlock+0x8>)
 8004a92:	f7ff be3e 	b.w	8004712 <__retarget_lock_release_recursive>
 8004a96:	bf00      	nop
 8004a98:	20000208 	.word	0x20000208

08004a9c <_read_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	4d07      	ldr	r5, [pc, #28]	; (8004abc <_read_r+0x20>)
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	602a      	str	r2, [r5, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f000 f828 	bl	8004b00 <_read>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <_read_r+0x1e>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	b103      	cbz	r3, 8004aba <_read_r+0x1e>
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	20000210 	.word	0x20000210

08004ac0 <_close>:
 8004ac0:	4b02      	ldr	r3, [pc, #8]	; (8004acc <_close+0xc>)
 8004ac2:	2258      	movs	r2, #88	; 0x58
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aca:	4770      	bx	lr
 8004acc:	20000210 	.word	0x20000210

08004ad0 <_fstat>:
 8004ad0:	4b02      	ldr	r3, [pc, #8]	; (8004adc <_fstat+0xc>)
 8004ad2:	2258      	movs	r2, #88	; 0x58
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ada:	4770      	bx	lr
 8004adc:	20000210 	.word	0x20000210

08004ae0 <_isatty>:
 8004ae0:	4b02      	ldr	r3, [pc, #8]	; (8004aec <_isatty+0xc>)
 8004ae2:	2258      	movs	r2, #88	; 0x58
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000210 	.word	0x20000210

08004af0 <_lseek>:
 8004af0:	4b02      	ldr	r3, [pc, #8]	; (8004afc <_lseek+0xc>)
 8004af2:	2258      	movs	r2, #88	; 0x58
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	4770      	bx	lr
 8004afc:	20000210 	.word	0x20000210

08004b00 <_read>:
 8004b00:	4b02      	ldr	r3, [pc, #8]	; (8004b0c <_read+0xc>)
 8004b02:	2258      	movs	r2, #88	; 0x58
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0a:	4770      	bx	lr
 8004b0c:	20000210 	.word	0x20000210

08004b10 <_init>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr

08004b1c <_fini>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr
